# HG changeset patch
# User RealDolos <dolos@cock.li>
# Date 1517405006 -3600
#      Wed Jan 31 14:23:26 2018 +0100
# Node ID b348aebb208576918c062072566470abc9a56d4f
# Parent  27fd083ed7ee5782e52a5eaf0286c5ffa8b35a9e
Readd DeferredSave.jsm

e.g. DTA compat
Backed out changeset c6099f497e32

diff --git a/toolkit/mozapps/extensions/DeferredSave.jsm b/toolkit/mozapps/extensions/DeferredSave.jsm
new file mode 100644
--- /dev/null
+++ b/toolkit/mozapps/extensions/DeferredSave.jsm
@@ -0,0 +1,299 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const Cu = Components.utils;
+const Cc = Components.classes;
+const Ci = Components.interfaces;
+
+Cu.import("resource://gre/modules/osfile.jsm");
+/* globals OS*/
+Cu.import("resource://gre/modules/PromiseUtils.jsm");
+
+// Make it possible to mock out timers for testing
+var MakeTimer = () => Cc["@mozilla.org/timer;1"].createInstance(Ci.nsITimer);
+
+this.EXPORTED_SYMBOLS = ["DeferredSave"];
+
+// If delay parameter is not provided, default is 50 milliseconds.
+const DEFAULT_SAVE_DELAY_MS = 50;
+
+Cu.import("resource://gre/modules/Log.jsm");
+// Configure a logger at the parent 'DeferredSave' level to format
+// messages for all the modules under DeferredSave.*
+const DEFERREDSAVE_PARENT_LOGGER_ID = "DeferredSave";
+var parentLogger = Log.repository.getLogger(DEFERREDSAVE_PARENT_LOGGER_ID);
+parentLogger.level = Log.Level.Warn;
+var formatter = new Log.BasicFormatter();
+// Set parent logger (and its children) to append to
+// the Javascript section of the Browser Console
+parentLogger.addAppender(new Log.ConsoleAppender(formatter));
+// Set parent logger (and its children) to
+// also append to standard out
+parentLogger.addAppender(new Log.DumpAppender(formatter));
+
+// Provide the ability to enable/disable logging
+// messages at runtime.
+// If the "extensions.logging.enabled" preference is
+// missing or 'false', messages at the WARNING and higher
+// severity should be logged to the JS console and standard error.
+// If "extensions.logging.enabled" is set to 'true', messages
+// at DEBUG and higher should go to JS console and standard error.
+Cu.import("resource://gre/modules/Services.jsm");
+
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "AsyncShutdown",
+                                  "resource://gre/modules/AsyncShutdown.jsm");
+
+const PREF_LOGGING_ENABLED = "extensions.logging.enabled";
+const NS_PREFBRANCH_PREFCHANGE_TOPIC_ID = "nsPref:changed";
+
+/**
+* Preference listener which listens for a change in the
+* "extensions.logging.enabled" preference and changes the logging level of the
+* parent 'addons' level logger accordingly.
+*/
+var PrefObserver = {
+ init() {
+   Services.prefs.addObserver(PREF_LOGGING_ENABLED, this);
+   Services.obs.addObserver(this, "xpcom-shutdown");
+   this.observe(null, NS_PREFBRANCH_PREFCHANGE_TOPIC_ID, PREF_LOGGING_ENABLED);
+ },
+
+ observe(aSubject, aTopic, aData) {
+   if (aTopic == "xpcom-shutdown") {
+     Services.prefs.removeObserver(PREF_LOGGING_ENABLED, this);
+     Services.obs.removeObserver(this, "xpcom-shutdown");
+   } else if (aTopic == NS_PREFBRANCH_PREFCHANGE_TOPIC_ID) {
+     let debugLogEnabled = Services.prefs.getBoolPref(PREF_LOGGING_ENABLED, false);
+     if (debugLogEnabled) {
+       parentLogger.level = Log.Level.Debug;
+     } else {
+       parentLogger.level = Log.Level.Warn;
+     }
+   }
+ }
+};
+
+PrefObserver.init();
+
+/**
+ * A module to manage deferred, asynchronous writing of data files
+ * to disk. Writing is deferred by waiting for a specified delay after
+ * a request to save the data, before beginning to write. If more than
+ * one save request is received during the delay, all requests are
+ * fulfilled by a single write.
+ *
+ * @constructor
+ * @param {string} aPath
+ *        String representing the full path of the file where the data
+ *        is to be written.
+ * @param {function} aDataProvider
+ *        Callback function that takes no argument and returns the data to
+ *        be written. If aDataProvider returns an ArrayBufferView, the
+ *        bytes it contains are written to the file as is.
+ *        If aDataProvider returns a String the data are UTF-8 encoded
+ *        and then written to the file.
+ * @param {object | integer} [aOptions]
+ *        The delay in milliseconds between the first saveChanges() call
+ *        that marks the data as needing to be saved, and when the DeferredSave
+ *        begins writing the data to disk. Default 50 milliseconds.
+ *
+ *        Or, an options object containing:
+ *         - delay: A delay in milliseconds.
+ *         - finalizeAt: An AsyncShutdown blocker during which to
+ *           finalize any pending writes.
+ */
+this.DeferredSave = function(aPath, aDataProvider, aOptions = {}) {
+  if (typeof aOptions == "number") {
+    aOptions = {delay: aOptions};
+  }
+
+  // Create a new logger (child of 'DeferredSave' logger)
+  // for use by this particular instance of DeferredSave object
+  let leafName = OS.Path.basename(aPath);
+  let logger_id = DEFERREDSAVE_PARENT_LOGGER_ID + "." + leafName;
+  this.logger = Log.repository.getLogger(logger_id);
+
+  // @type {Deferred|null}, null when no data needs to be written
+  // @resolves with the result of OS.File.writeAtomic when all writes complete
+  // @rejects with the error from OS.File.writeAtomic if the write fails,
+  //          or with the error from aDataProvider() if that throws.
+  this._pending = null;
+
+  // @type {Promise}, completes when the in-progress write (if any) completes,
+  //       kept as a resolved promise at other times to simplify logic.
+  //       Because _deferredSave() always uses _writing.then() to execute
+  //       its next action, we don't need a special case for whether a write
+  //       is in progress - if the previous write is complete (and the _writing
+  //       promise is already resolved/rejected), _writing.then() starts
+  //       the next action immediately.
+  //
+  // @resolves with the result of OS.File.writeAtomic
+  // @rejects with the error from OS.File.writeAtomic
+  this._writing = Promise.resolve(0);
+
+  // Are we currently waiting for a write to complete
+  this.writeInProgress = false;
+
+  this._path = aPath;
+  this._dataProvider = aDataProvider;
+
+  this._timer = null;
+
+  // Some counters for telemetry
+  // The total number of times the file was written
+  this.totalSaves = 0;
+
+  // The number of times the data became dirty while
+  // another save was in progress
+  this.overlappedSaves = 0;
+
+  // Error returned by the most recent write (if any)
+  this._lastError = null;
+
+  if (aOptions.delay && (aOptions.delay > 0))
+    this._delay = aOptions.delay;
+  else
+    this._delay = DEFAULT_SAVE_DELAY_MS;
+
+  this._finalizeAt = aOptions.finalizeAt || AsyncShutdown.profileBeforeChange;
+  this._finalize = this._finalize.bind(this);
+  this._finalizeAt.addBlocker(`DeferredSave: writing data to ${aPath}`,
+                              this._finalize);
+};
+
+this.DeferredSave.prototype = {
+  get dirty() {
+    return this._pending || this.writeInProgress;
+  },
+
+  get lastError() {
+    return this._lastError;
+  },
+
+  get path() {
+    return this._path;
+  },
+
+  // Start the pending timer if data is dirty
+  _startTimer() {
+    if (!this._pending) {
+      return;
+    }
+
+      this.logger.debug("Starting timer");
+    if (!this._timer)
+      this._timer = MakeTimer();
+    this._timer.initWithCallback(() => this._timerCallback(),
+                                 this._delay, Ci.nsITimer.TYPE_ONE_SHOT);
+  },
+
+  /**
+   * Mark the current stored data dirty, and schedule a flush to disk
+   * @return A Promise<integer> that will be resolved after the data is written to disk;
+   *         the promise is resolved with the number of bytes written.
+   */
+  saveChanges() {
+      this.logger.debug("Save changes");
+    if (!this._pending) {
+      if (this.writeInProgress) {
+          this.logger.debug("Data changed while write in progress");
+        this.overlappedSaves++;
+      }
+      this._pending = PromiseUtils.defer();
+      // Wait until the most recent write completes or fails (if it hasn't already)
+      // and then restart our timer
+      this._writing.then(count => this._startTimer(), error => this._startTimer());
+    }
+    return this._pending.promise;
+  },
+
+  _timerCallback() {
+    Services.tm.idleDispatchToMainThread(() => this._deferredSave());
+  },
+
+  _deferredSave() {
+    let pending = this._pending;
+    this._pending = null;
+    let writing = this._writing;
+    this._writing = pending.promise;
+
+    // In either the success or the exception handling case, we don't need to handle
+    // the error from _writing here; it's already being handled in another then()
+    let toSave = null;
+    try {
+      toSave = this._dataProvider();
+    } catch (e) {
+        this.logger.error("Deferred save dataProvider failed", e);
+      writing.catch(error => {})
+        .then(count => {
+          pending.reject(e);
+        });
+      return;
+    }
+
+    writing.catch(error => { return 0; })
+    .then(count => {
+        this.logger.debug("Starting write");
+      this.totalSaves++;
+      this.writeInProgress = true;
+
+      OS.File.writeAtomic(this._path, toSave, {tmpPath: this._path + ".tmp"})
+      .then(
+        result => {
+          this._lastError = null;
+          this.writeInProgress = false;
+              this.logger.debug("Write succeeded");
+          pending.resolve(result);
+        },
+        error => {
+          this._lastError = error;
+          this.writeInProgress = false;
+              this.logger.warn("Write failed", error);
+          pending.reject(error);
+        });
+    });
+  },
+
+  /**
+   * Immediately save the dirty data to disk, skipping
+   * the delay of normal operation. Note that the write
+   * still happens asynchronously in the worker
+   * thread from OS.File.
+   *
+   * There are four possible situations:
+   * 1) Nothing to flush
+   * 2) Data is not currently being written, in-memory copy is dirty
+   * 3) Data is currently being written, in-memory copy is clean
+   * 4) Data is being written and in-memory copy is dirty
+   *
+   * @return Promise<integer> that will resolve when all in-memory data
+   *         has finished being flushed, returning the number of bytes
+   *         written. If all in-memory data is clean, completes with the
+   *         result of the most recent write.
+   */
+  flush() {
+    // If we have pending changes, cancel our timer and set up the write
+    // immediately (_deferredSave queues the write for after the most
+    // recent write completes, if it hasn't already)
+    if (this._pending) {
+        this.logger.debug("Flush called while data is dirty");
+      if (this._timer) {
+        this._timer.cancel();
+        this._timer = null;
+      }
+      this._deferredSave();
+    }
+
+    return this._writing;
+  },
+
+  _finalize() {
+    return this.flush().catch(Cu.reportError);
+  },
+
+};
diff --git a/toolkit/mozapps/extensions/moz.build b/toolkit/mozapps/extensions/moz.build
--- a/toolkit/mozapps/extensions/moz.build
+++ b/toolkit/mozapps/extensions/moz.build
@@ -35,16 +35,17 @@ EXTRA_COMPONENTS += [
 
 EXTRA_PP_COMPONENTS += [
     'extensions.manifest',
 ]
 
 EXTRA_JS_MODULES += [
     'AddonManager.jsm',
     'ChromeManifestParser.jsm',
+    'DeferredSave.jsm',
     'LightweightThemeManager.jsm',
 ]
 
 JAR_MANIFESTS += ['jar.mn']
 
 EXPORTS.mozilla += [
     'AddonContentPolicy.h',
     'AddonManagerStartup.h',
diff --git a/toolkit/mozapps/extensions/test/xpcshell/test_DeferredSave.js b/toolkit/mozapps/extensions/test/xpcshell/test_DeferredSave.js
new file mode 100644
--- /dev/null
+++ b/toolkit/mozapps/extensions/test/xpcshell/test_DeferredSave.js
@@ -0,0 +1,545 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/
+ */
+
+// Test behaviour of module to perform deferred save of data
+// files to disk
+
+"use strict";
+
+const testFile = gProfD.clone();
+testFile.append("DeferredSaveTest");
+
+Components.utils.import("resource://gre/modules/Promise.jsm");
+
+var DSContext = Components.utils.import("resource://gre/modules/DeferredSave.jsm", {});
+var DeferredSave = DSContext.DeferredSave;
+
+// Test wrapper to let us do promise/task based testing of DeferredSave
+function DeferredSaveTester(aDataProvider) {
+  let tester = {
+    // Deferred for the promise returned by the mock writeAtomic
+    waDeferred: null,
+
+    // The most recent data "written" by the mock OS.File.writeAtomic
+    writtenData: undefined,
+
+    dataToSave: "Data to save",
+
+    save: (aData, aWriteHandler) => {
+      tester.writeHandler = aWriteHandler || writer;
+      tester.dataToSave = aData;
+      return tester.saver.saveChanges();
+    },
+
+    flush: (aWriteHandler) => {
+      tester.writeHandler = aWriteHandler || writer;
+      return tester.saver.flush();
+    },
+
+    get lastError() {
+      return tester.saver.lastError;
+    }
+  };
+
+  // Default write handler for most cases where the test case doesn't need
+  // to do anything while the write is in progress; just completes the write
+  // on the next event loop
+  function writer(aTester) {
+    do_print("default write callback");
+    let length = aTester.writtenData.length;
+    do_execute_soon(() => aTester.waDeferred.resolve(length));
+  }
+
+  if (!aDataProvider)
+    aDataProvider = () => tester.dataToSave;
+
+  tester.saver = new DeferredSave(testFile.path, aDataProvider);
+
+  // Install a mock for OS.File.writeAtomic to let us control the async
+  // behaviour of the promise
+  DSContext.OS.File.writeAtomic = function mock_writeAtomic(aFile, aData, aOptions) {
+      do_print("writeAtomic: " + aFile + " data: '" + aData + "', " + aOptions.toSource());
+      tester.writtenData = aData;
+      tester.waDeferred = Promise.defer();
+      tester.writeHandler(tester);
+      return tester.waDeferred.promise;
+    };
+
+  return tester;
+}
+
+/**
+ * Install a mock nsITimer factory that triggers on the next spin of
+ * the event loop after it is scheduled
+ */
+function setQuickMockTimer() {
+  let quickTimer = {
+    initWithCallback(aFunction, aDelay, aType) {
+      do_print("Starting quick timer, delay = " + aDelay);
+      do_execute_soon(aFunction);
+    },
+    cancel() {
+      do_throw("Attempted to cancel a quickMockTimer");
+    }
+  };
+  DSContext.MakeTimer = () => {
+    do_print("Creating quick timer");
+    return quickTimer;
+  };
+}
+
+/**
+ * Install a mock nsITimer factory in DeferredSave.jsm, returning a promise that resolves
+ * when the client code sets the timer. Test cases can use this to wait for client code to
+ * be ready for a timer event, and then signal the event by calling mockTimer.callback().
+ * This could use some enhancement; clients can re-use the returned timer,
+ * but with this implementation it's not possible for the test to wait for
+ * a second call to initWithCallback() on the re-used timer.
+ * @return Promise{mockTimer} that resolves when initWithCallback()
+ *         is called
+ */
+function setPromiseMockTimer() {
+  return new Promise(resolve => {
+    let mockTimer = {
+      callback: null,
+      delay: null,
+      type: null,
+      isCancelled: false,
+
+      initWithCallback(aFunction, aDelay, aType) {
+        do_print("Starting timer, delay = " + aDelay);
+        this.callback = aFunction;
+        this.delay = aDelay;
+        this.type = aType;
+        // cancelled timers can be re-used
+        this.isCancelled = false;
+        resolve(this);
+      },
+      cancel() {
+        do_print("Cancelled mock timer");
+        this.callback = null;
+        this.delay = null;
+        this.type = null;
+        this.isCancelled = true;
+        // If initWithCallback was never called, resolve to let tests check for cancel
+        resolve(this);
+      }
+    };
+    DSContext.MakeTimer = () => {
+      do_print("Creating mock timer");
+      return mockTimer;
+    };
+  });
+}
+
+/**
+ * Return a Promise<null> that resolves after the specified number of milliseconds
+ */
+function delay(aDelayMS) {
+  return new Promise(resolve => {
+    do_timeout(aDelayMS, () => resolve(null));
+  });
+}
+
+// Modify set data once, ask for save, make sure it saves cleanly
+add_task(async function test_basic_save_succeeds() {
+  setQuickMockTimer();
+  let tester = DeferredSaveTester();
+  let data = "Test 1 Data";
+
+  await tester.save(data);
+  do_check_eq(tester.writtenData, data);
+  do_check_eq(1, tester.saver.totalSaves);
+});
+
+// Two saves called during the same event loop, both with callbacks
+// Make sure we save only the second version of the data
+add_task(async function test_two_saves() {
+  setQuickMockTimer();
+  let tester = DeferredSaveTester();
+  let firstCallback_happened = false;
+  let firstData = "Test first save";
+  let secondData = "Test second save";
+
+  // first save should not resolve until after the second one is called,
+  // so we can't just yield this promise
+  tester.save(firstData).then(count => {
+    do_check_eq(secondData, tester.writtenData);
+    do_check_false(firstCallback_happened);
+    firstCallback_happened = true;
+  }, do_report_unexpected_exception);
+
+  await tester.save(secondData);
+  do_check_true(firstCallback_happened);
+  do_check_eq(secondData, tester.writtenData);
+  do_check_eq(1, tester.saver.totalSaves);
+});
+
+// Two saves called with a delay in between, both with callbacks
+// Make sure we save the second version of the data
+add_task(async function test_two_saves_delay() {
+  let timerPromise = setPromiseMockTimer();
+  let tester = DeferredSaveTester();
+  let firstCallback_happened = false;
+  let delayDone = false;
+
+  let firstData = "First data to save with delay";
+  let secondData = "Modified data to save with delay";
+
+  tester.save(firstData).then(count => {
+    do_check_false(firstCallback_happened);
+    do_check_true(delayDone);
+    do_check_eq(secondData, tester.writtenData);
+    firstCallback_happened = true;
+  }, do_report_unexpected_exception);
+
+  // Wait a short time to let async events possibly spawned by the
+  // first tester.save() to run
+  await delay(2);
+  delayDone = true;
+  // request to save modified data
+  let saving = tester.save(secondData);
+  // Yield to wait for client code to set the timer
+  let activeTimer = await timerPromise;
+  // and then trigger it
+  activeTimer.callback();
+  // now wait for the DeferredSave to finish saving
+  await saving;
+  do_check_true(firstCallback_happened);
+  do_check_eq(secondData, tester.writtenData);
+  do_check_eq(1, tester.saver.totalSaves);
+  do_check_eq(0, tester.saver.overlappedSaves);
+});
+
+// Test case where OS.File immediately reports an error when the write begins
+// Also check that the "error" getter correctly returns the error
+// Then do a write that succeeds, and make sure the error is cleared
+add_task(async function test_error_immediate() {
+  let tester = DeferredSaveTester();
+  let testError = new Error("Forced failure");
+  function writeFail(aTester) {
+    aTester.waDeferred.reject(testError);
+  }
+
+  setQuickMockTimer();
+  await tester.save("test_error_immediate", writeFail).then(
+    count => do_throw("Did not get expected error"),
+    error => do_check_eq(testError.message, error.message)
+    );
+  do_check_eq(testError, tester.lastError);
+
+  // This write should succeed and clear the error
+  await tester.save("test_error_immediate succeeds");
+  do_check_eq(null, tester.lastError);
+  // The failed save attempt counts in our total
+  do_check_eq(2, tester.saver.totalSaves);
+});
+
+// Save one set of changes, then while the write is in progress, modify the
+// data two more times. Test that we re-write the dirty data exactly once
+// after the first write succeeds
+add_task(async function dirty_while_writing() {
+  let tester = DeferredSaveTester();
+  let firstData = "First data";
+  let secondData = "Second data";
+  let thirdData = "Third data";
+  let firstCallback_happened = false;
+  let secondCallback_happened = false;
+  let writer = await new Promise(resolve => {
+
+    function writeCallback(aTester) {
+      resolve(aTester.waDeferred);
+    }
+
+    setQuickMockTimer();
+    do_print("First save");
+    tester.save(firstData, writeCallback).then(
+      count => {
+        do_check_false(firstCallback_happened);
+        do_check_false(secondCallback_happened);
+        do_check_eq(tester.writtenData, firstData);
+        firstCallback_happened = true;
+      }, do_report_unexpected_exception);
+
+    do_print("waiting for writer");
+  });
+  do_print("Write started");
+
+  // Delay a bit, modify the data and call saveChanges, delay a bit more,
+  // modify the data and call saveChanges again, another delay,
+  // then complete the in-progress write
+  await delay(1);
+
+  tester.save(secondData).then(
+    count => {
+      do_check_true(firstCallback_happened);
+      do_check_false(secondCallback_happened);
+      do_check_eq(tester.writtenData, thirdData);
+      secondCallback_happened = true;
+    }, do_report_unexpected_exception);
+
+  // wait and then do the third change
+  await delay(1);
+  let thirdWrite = tester.save(thirdData);
+
+  // wait a bit more and then finally finish the first write
+  await delay(1);
+  writer.resolve(firstData.length);
+
+  // Now let everything else finish
+  await thirdWrite;
+  do_check_true(firstCallback_happened);
+  do_check_true(secondCallback_happened);
+  do_check_eq(tester.writtenData, thirdData);
+  do_check_eq(2, tester.saver.totalSaves);
+  do_check_eq(1, tester.saver.overlappedSaves);
+});
+
+// A write callback for the OS.File.writeAtomic mock that rejects write attempts
+function disabled_write_callback(aTester) {
+  do_throw("Should not have written during clean flush");
+}
+
+// special write callback that disables itself to make sure
+// we don't try to write twice
+function write_then_disable(aTester) {
+  do_print("write_then_disable");
+  let length = aTester.writtenData.length;
+  aTester.writeHandler = disabled_write_callback;
+  do_execute_soon(() => aTester.waDeferred.resolve(length));
+}
+
+// Flush tests. First, do an ordinary clean save and then call flush;
+// there should not be another save
+add_task(async function flush_after_save() {
+  setQuickMockTimer();
+  let tester = DeferredSaveTester();
+  let dataToSave = "Flush after save";
+
+  await tester.save(dataToSave);
+  await tester.flush(disabled_write_callback);
+  do_check_eq(1, tester.saver.totalSaves);
+});
+
+// Flush while a write is in progress, but the in-memory data is clean
+add_task(async function flush_during_write() {
+  let tester = DeferredSaveTester();
+  let dataToSave = "Flush during write";
+  let firstCallback_happened = false;
+  let writer = await new Promise(resolve => {
+
+    function writeCallback(aTester) {
+      resolve(aTester.waDeferred);
+    }
+
+    setQuickMockTimer();
+    tester.save(dataToSave, writeCallback).then(
+      count => {
+        do_check_false(firstCallback_happened);
+        firstCallback_happened = true;
+      }, do_report_unexpected_exception);
+
+  });
+
+  // call flush with the write callback disabled, delay a bit more, complete in-progress write
+  let flushing = tester.flush(disabled_write_callback);
+  await delay(2);
+  writer.resolve(dataToSave.length);
+
+  // now wait for the flush to finish
+  await flushing;
+  do_check_true(firstCallback_happened);
+  do_check_eq(1, tester.saver.totalSaves);
+});
+
+// Flush while dirty but write not in progress
+// The data written should be the value at the time
+// flush() is called, even if it is changed later
+add_task(async function flush_while_dirty() {
+  let timerPromise = setPromiseMockTimer();
+  let tester = DeferredSaveTester();
+  let firstData = "Flush while dirty, valid data";
+  let firstCallback_happened = false;
+
+  tester.save(firstData, write_then_disable).then(
+    count => {
+      do_check_false(firstCallback_happened);
+      firstCallback_happened = true;
+      do_check_eq(tester.writtenData, firstData);
+    }, do_report_unexpected_exception);
+
+  // Wait for the timer to be set, but don't trigger it so the write won't start
+  let activeTimer = await timerPromise;
+
+  let flushing = tester.flush();
+
+  // Make sure the timer was cancelled
+  do_check_true(activeTimer.isCancelled);
+
+  // Also make sure that data changed after the flush call
+  // (even without a saveChanges() call) doesn't get written
+  tester.dataToSave = "Flush while dirty, invalid data";
+
+  await flushing;
+  do_check_true(firstCallback_happened);
+  do_check_eq(tester.writtenData, firstData);
+  do_check_eq(1, tester.saver.totalSaves);
+});
+
+// And the grand finale - modify the data, start writing,
+// modify the data again so we're in progress and dirty,
+// then flush, then modify the data again
+// Data for the second write should be taken at the time
+// flush() is called, even if it is modified later
+add_task(async function flush_writing_dirty() {
+  let timerPromise = setPromiseMockTimer();
+  let tester = DeferredSaveTester();
+  let firstData = "Flush first pass data";
+  let secondData = "Flush second pass data";
+  let firstCallback_happened = false;
+  let secondCallback_happened = false;
+  let writeStarted = Promise.defer();
+
+  function writeCallback(aTester) {
+    writeStarted.resolve(aTester.waDeferred);
+  }
+
+  tester.save(firstData, writeCallback).then(
+    count => {
+      do_check_false(firstCallback_happened);
+      do_check_eq(tester.writtenData, firstData);
+      firstCallback_happened = true;
+    }, do_report_unexpected_exception);
+
+  // Trigger the timer callback as soon as the DeferredSave sets it
+  let activeTimer = await timerPromise;
+  activeTimer.callback();
+  let writer = await writeStarted.promise;
+  // the first write has started
+
+  // dirty the data and request another save
+  // after the second save completes, there should not be another write
+  tester.save(secondData, write_then_disable).then(
+    count => {
+      do_check_true(firstCallback_happened);
+      do_check_false(secondCallback_happened);
+      do_check_eq(tester.writtenData, secondData);
+      secondCallback_happened = true;
+    }, do_report_unexpected_exception);
+
+  let flushing = tester.flush(write_then_disable);
+  // Flush should have cancelled our timer
+  do_check_true(activeTimer.isCancelled);
+  tester.dataToSave = "Flush, invalid data: changed late";
+  // complete the first write
+  writer.resolve(firstData.length);
+  // now wait for the second write / flush to complete
+  await flushing;
+  do_check_true(firstCallback_happened);
+  do_check_true(secondCallback_happened);
+  do_check_eq(tester.writtenData, secondData);
+  do_check_eq(2, tester.saver.totalSaves);
+  do_check_eq(1, tester.saver.overlappedSaves);
+});
+
+// A data provider callback that throws an error the first
+// time it is called, and a different error the second time
+// so that tests can (a) make sure the promise is rejected
+// with the error and (b) make sure the provider is only
+// called once in case of error
+const expectedDataError = "Failed to serialize data";
+var badDataError = null;
+function badDataProvider() {
+  let err = new Error(badDataError);
+  badDataError = "badDataProvider called twice";
+  throw err;
+}
+
+// Handle cases where data provider throws
+// First, throws during a normal save
+add_task(async function data_throw() {
+  setQuickMockTimer();
+  badDataError = expectedDataError;
+  let tester = DeferredSaveTester(badDataProvider);
+  await tester.save("data_throw").then(
+    count => do_throw("Expected serialization failure"),
+    error => do_check_eq(error.message, expectedDataError));
+});
+
+// Now, throws during flush
+add_task(async function data_throw_during_flush() {
+  badDataError = expectedDataError;
+  let tester = DeferredSaveTester(badDataProvider);
+  let firstCallback_happened = false;
+
+  setPromiseMockTimer();
+  // Write callback should never be called
+  tester.save("data_throw_during_flush", disabled_write_callback).then(
+    count => do_throw("Expected serialization failure"),
+    error => {
+      do_check_false(firstCallback_happened);
+      do_check_eq(error.message, expectedDataError);
+      firstCallback_happened = true;
+    });
+
+  // flush() will cancel the timer
+  await tester.flush(disabled_write_callback).then(
+    count => do_throw("Expected serialization failure"),
+    error => do_check_eq(error.message, expectedDataError)
+    );
+
+  do_check_true(firstCallback_happened);
+});
+
+// Try to reproduce race condition. The observed sequence of events:
+// saveChanges
+// start writing
+// saveChanges
+// finish writing (need to restart delayed timer)
+// saveChanges
+// flush
+// write starts
+// actually restart timer for delayed write
+// write completes
+// delayed timer goes off, throws error because DeferredSave has been torn down
+add_task(async function delay_flush_race() {
+  let timerPromise = setPromiseMockTimer();
+  let tester = DeferredSaveTester();
+  let firstData = "First save";
+  let secondData = "Second save";
+  let thirdData = "Third save";
+  let writeStarted = Promise.defer();
+
+  function writeCallback(aTester) {
+    writeStarted.resolve(aTester.waDeferred);
+  }
+
+  // This promise won't resolve until after writeStarted
+  let firstSave = tester.save(firstData, writeCallback);
+  (await timerPromise).callback();
+
+  let writer = await writeStarted.promise;
+  // the first write has started
+
+  // dirty the data and request another save
+  let secondSave = tester.save(secondData);
+
+  // complete the first write
+  writer.resolve(firstData.length);
+  await firstSave;
+  do_check_eq(tester.writtenData, firstData);
+
+  tester.save(thirdData);
+  let flushing = tester.flush();
+
+  await secondSave;
+  do_check_eq(tester.writtenData, thirdData);
+
+  await flushing;
+  do_check_eq(tester.writtenData, thirdData);
+
+  // Our DeferredSave should not have a _timer here; if it
+  // does, the bug caused a reschedule
+  do_check_eq(null, tester.saver._timer);
+});
diff --git a/toolkit/mozapps/extensions/test/xpcshell/xpcshell.ini b/toolkit/mozapps/extensions/test/xpcshell/xpcshell.ini
--- a/toolkit/mozapps/extensions/test/xpcshell/xpcshell.ini
+++ b/toolkit/mozapps/extensions/test/xpcshell/xpcshell.ini
@@ -12,16 +12,17 @@ support-files =
 [test_addonStartup.js]
 [test_asyncBlocklistLoad.js]
 tags = blocklist
 [test_blocklist_gfx.js]
 tags = blocklist
 [test_cache_certdb.js]
 run-if = addon_signing
 [test_cacheflush.js]
+[test_DeferredSave.js]
 [test_gmpProvider.js]
 skip-if = appname != "firefox"
 [test_invalid_install_rdf.js]
 [test_isReady.js]
 [test_pluginInfoURL.js]
 tags = blocklist
 [test_provider_markSafe.js]
 [test_provider_shutdown.js]
# HG changeset patch
# User RealDolos <dolos@cock.li>
# Date 1517409436 -3600
#      Wed Jan 31 15:37:16 2018 +0100
# Node ID b50f2d85d92f99ee30ec66855446e9c5c7d99885
# Parent  b348aebb208576918c062072566470abc9a56d4f
Make prefwindows work again

diff --git a/toolkit/content/jar.mn b/toolkit/content/jar.mn
--- a/toolkit/content/jar.mn
+++ b/toolkit/content/jar.mn
@@ -81,16 +81,17 @@ toolkit.jar:
    content/global/bindings/general.xml         (widgets/general.xml)
    content/global/bindings/groupbox.xml        (widgets/groupbox.xml)
    content/global/bindings/listbox.xml         (widgets/listbox.xml)
    content/global/bindings/menu.xml            (widgets/menu.xml)
    content/global/bindings/menulist.xml        (widgets/menulist.xml)
    content/global/bindings/notification.xml    (widgets/notification.xml)
    content/global/bindings/numberbox.xml       (widgets/numberbox.xml)
    content/global/bindings/popup.xml           (widgets/popup.xml)
+*  content/global/bindings/preferences.xml     (widgets/preferences.xml)
    content/global/bindings/progressmeter.xml   (widgets/progressmeter.xml)
    content/global/bindings/radio.xml           (widgets/radio.xml)
    content/global/bindings/remote-browser.xml  (widgets/remote-browser.xml)
    content/global/bindings/resizer.xml         (widgets/resizer.xml)
    content/global/bindings/richlistbox.xml     (widgets/richlistbox.xml)
    content/global/bindings/scale.xml           (widgets/scale.xml)
    content/global/bindings/scrollbar.xml       (widgets/scrollbar.xml)
    content/global/bindings/scrollbox.xml       (widgets/scrollbox.xml)
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -963,16 +963,66 @@ wizardpage {
 .wizard-header {
   -moz-binding: url("chrome://global/content/bindings/wizard.xml#wizard-header");
 }
 
 .wizard-buttons {
   -moz-binding: url("chrome://global/content/bindings/wizard.xml#wizard-buttons");
 }
 
+/********** preferences ********/
+
+prefwindow,
+prefwindow:root /* override :root from above */ {
+  -moz-binding: url("chrome://global/content/bindings/preferences.xml#prefwindow");
+  -moz-box-orient: vertical;
+}
+
+prefpane {
+  -moz-binding: url("chrome://global/content/bindings/preferences.xml#prefpane");
+  -moz-box-orient: vertical;
+}
+
+prefwindow > .paneDeckContainer {
+  overflow: hidden;
+}
+
+prefpane > .content-box {
+  overflow: hidden;
+}
+
+prefwindow[type="child"] > .paneDeckContainer {
+  overflow: -moz-hidden-unscrollable;
+}
+
+prefwindow[type="child"] > prefpane > .content-box {
+  -moz-box-flex: 1;
+  overflow: -moz-hidden-unscrollable;
+}
+
+preferences {
+  -moz-binding: url("chrome://global/content/bindings/preferences.xml#preferences");
+  visibility: collapse;
+}
+
+preference {
+  -moz-binding: url("chrome://global/content/bindings/preferences.xml#preference");
+  visibility: collapse;
+}
+
+radio[pane] {
+  -moz-binding: url("chrome://global/content/bindings/preferences.xml#panebutton") !important;
+  -moz-box-orient: vertical;
+  -moz-box-align: center;
+}
+
+prefwindow[chromehidden~="toolbar"] .chromeclass-toolbar {
+  display: none;
+}
+
 /********** Rich Listbox ********/
 
 richlistbox {
   -moz-binding: url('chrome://global/content/bindings/richlistbox.xml#richlistbox');
   -moz-user-focus: normal;
   -moz-box-orient: vertical;
 }
 
diff --git a/toolkit/themes/linux/global/global.css b/toolkit/themes/linux/global/global.css
--- a/toolkit/themes/linux/global/global.css
+++ b/toolkit/themes/linux/global/global.css
@@ -35,16 +35,17 @@ progressmeter[mode="undetermined"] {
   --arrowpanel-border-color: ThreeDShadow;
 }
 
 /* ::::: root elements ::::: */
 
 window,
 page,
 dialog,
+prefwindow,
 wizard {
   -moz-appearance: window;
   background-color: -moz-Dialog;
   color: -moz-DialogText;
   font: message-box;
 }
 
 /* deprecated */
diff --git a/toolkit/themes/linux/global/jar.mn b/toolkit/themes/linux/global/jar.mn
--- a/toolkit/themes/linux/global/jar.mn
+++ b/toolkit/themes/linux/global/jar.mn
@@ -16,16 +16,17 @@ toolkit.jar:
    skin/classic/global/groupbox.css
    skin/classic/global/listbox.css
    skin/classic/global/menu.css
    skin/classic/global/menulist.css
    skin/classic/global/netError.css
 *  skin/classic/global/notification.css
    skin/classic/global/numberbox.css
    skin/classic/global/popup.css
+   skin/classic/global/preferences.css
    skin/classic/global/printPreview.css
    skin/classic/global/radio.css
    skin/classic/global/scrollbox.css
    skin/classic/global/splitter.css
    skin/classic/global/tabbox.css
    skin/classic/global/textbox.css
    skin/classic/global/toolbar.css
    skin/classic/global/toolbarbutton.css
diff --git a/toolkit/themes/osx/global/global.css b/toolkit/themes/osx/global/global.css
--- a/toolkit/themes/osx/global/global.css
+++ b/toolkit/themes/osx/global/global.css
@@ -24,16 +24,17 @@ menulist > menupopup {
   --focus-ring-box-shadow: @focusRingShadow@;
 }
 
 /* ::::: root elements ::::: */
 
 window,
 page,
 dialog,
+prefwindow,
 wizard {
   -moz-appearance: dialog;
   background-color: #FFFFFF;
   color: -moz-DialogText;
   font: message-box;
 }
 
 /* deprecated */
diff --git a/toolkit/themes/osx/global/jar.mn b/toolkit/themes/osx/global/jar.mn
--- a/toolkit/themes/osx/global/jar.mn
+++ b/toolkit/themes/osx/global/jar.mn
@@ -19,16 +19,17 @@ toolkit.jar:
   skin/classic/global/groupbox.css
   skin/classic/global/listbox.css
   skin/classic/global/menu.css
   skin/classic/global/menulist.css
 * skin/classic/global/notification.css
   skin/classic/global/netError.css
   skin/classic/global/numberbox.css
   skin/classic/global/popup.css
+  skin/classic/global/preferences.css
   skin/classic/global/progressmeter.css
   skin/classic/global/radio.css
   skin/classic/global/resizer.css
   skin/classic/global/richlistbox.css
   skin/classic/global/scrollbars.css                                 (nativescrollbars.css)
   skin/classic/global/scrollbox.css
   skin/classic/global/splitter.css
   skin/classic/global/tabprompts.css
diff --git a/toolkit/themes/windows/global/global.css b/toolkit/themes/windows/global/global.css
--- a/toolkit/themes/windows/global/global.css
+++ b/toolkit/themes/windows/global/global.css
@@ -31,16 +31,17 @@ menulist > menupopup {
   }
 }
 
 /* ::::: root elements ::::: */
 
 window,
 page,
 dialog,
+prefwindow,
 wizard {
   -moz-appearance: window;
   background-color: -moz-Dialog;
   color: -moz-DialogText;
   font: message-box;
 }
 
 /* deprecated */
diff --git a/toolkit/themes/windows/global/jar.mn b/toolkit/themes/windows/global/jar.mn
--- a/toolkit/themes/windows/global/jar.mn
+++ b/toolkit/themes/windows/global/jar.mn
@@ -8,16 +8,17 @@ toolkit.jar:
   skin/classic/global/autocomplete.css
   skin/classic/global/button.css
   skin/classic/global/checkbox.css
   skin/classic/global/dropmarker.css
   skin/classic/global/groupbox.css
 * skin/classic/global/menu.css
   skin/classic/global/menulist.css
 * skin/classic/global/popup.css
+  skin/classic/global/preferences.css
   skin/classic/global/radio.css
   skin/classic/global/tabbox.css
   skin/classic/global/textbox.css
   skin/classic/global/colorpicker.css
   skin/classic/global/commonDialog.css
   skin/classic/global/findBar.css
 * skin/classic/global/global.css
   skin/classic/global/listbox.css
# HG changeset patch
# User RealDolos <dolos@cock.li>
# Date 1517409596 -3600
#      Wed Jan 31 15:39:56 2018 +0100
# Node ID ef6749a6e329daf0be29041a07c5403f2158ec76
# Parent  b50f2d85d92f99ee30ec66855446e9c5c7d99885
Readd tree progress meters

Backed out changeset f2f92fe82b0e

diff --git a/accessible/tests/mochitest/treeview.js b/accessible/tests/mochitest/treeview.js
--- a/accessible/tests/mochitest/treeview.js
+++ b/accessible/tests/mochitest/treeview.js
@@ -102,16 +102,17 @@ nsTreeView.prototype =
     return info.parentIndex;
   },
   hasNextSibling: function hasNextSibling(aRowIndex, aAfterIndex) { },
   getLevel: function getLevel(aIndex) {
     var info = this.getInfoByIndex(aIndex);
     return info.level;
   },
   getImageSrc: function getImageSrc(aRow, aCol) {},
+  getProgressMode: function getProgressMode(aRow, aCol) {},
   isContainer: function isContainer(aIndex) {
     var data = this.getDataForIndex(aIndex);
     return data.open != undefined;
   },
   isContainerOpen: function isContainerOpen(aIndex) {
     var data = this.getDataForIndex(aIndex);
     return data.open;
   },
diff --git a/browser/base/content/pageinfo/pageInfo.js b/browser/base/content/pageinfo/pageInfo.js
--- a/browser/base/content/pageinfo/pageInfo.js
+++ b/browser/base/content/pageinfo/pageInfo.js
@@ -122,16 +122,17 @@ pageInfoTreeView.prototype = {
   isSeparator(index) { return false; },
   isSorted() { return this.sortcol > -1; },
   canDrop(index, orientation) { return false; },
   drop(row, orientation) { return false; },
   getParentIndex(index) { return 0; },
   hasNextSibling(index, after) { return false; },
   getLevel(index) { return 0; },
   getImageSrc(row, column) { },
+  getProgressMode(row, column) { },
   getCellValue(row, column) { },
   toggleOpenState(index) { },
   cycleHeader(col) { },
   selectionChanged() { },
   cycleCell(row, column) { },
   isEditable(row, column) { return false; },
   isSelectable(row, column) { return false; },
   performAction(action) { },
diff --git a/browser/components/places/content/treeView.js b/browser/components/places/content/treeView.js
--- a/browser/components/places/content/treeView.js
+++ b/browser/components/places/content/treeView.js
@@ -1530,16 +1530,17 @@ PlacesTreeView.prototype = {
     // Only the title column has an image.
     if (this._getColumnType(aColumn) != this.COLUMN_TYPE_TITLE)
       return "";
 
     let node = this._getNodeForRow(aRow);
     return node.icon;
   },
 
+  getProgressMode(aRow, aColumn) { },
   getCellValue(aRow, aColumn) { },
 
   getCellText: function PTV_getCellText(aRow, aColumn) {
     let node = this._getNodeForRow(aRow);
     switch (this._getColumnType(aColumn)) {
       case this.COLUMN_TYPE_TITLE:
         // normally, this is just the title, but we don't want empty items in
         // the tree view so return a special string if the title is empty.
diff --git a/browser/components/preferences/blocklists.js b/browser/components/preferences/blocklists.js
--- a/browser/components/preferences/blocklists.js
+++ b/browser/components/preferences/blocklists.js
@@ -32,16 +32,17 @@ var gBlocklistManager = {
       return "";
     },
 
     isSeparator(index) { return false; },
     isSorted() { return false; },
     isContainer(index) { return false; },
     setTree(tree) {},
     getImageSrc(row, column) {},
+    getProgressMode(row, column) {},
     getCellValue(row, column) {
       if (column.id == "selectionCol")
         return gBlocklistManager._blockLists[row].selected;
       return undefined;
     },
     cycleHeader(column) {},
     getRowProperties(row) { return ""; },
     getColumnProperties(column) { return ""; },
diff --git a/browser/components/preferences/cookies.js b/browser/components/preferences/cookies.js
--- a/browser/components/preferences/cookies.js
+++ b/browser/components/preferences/cookies.js
@@ -396,16 +396,17 @@ var gCookiesWindow = {
       if (!this._filtered) {
         var item = this._getItemAtIndex(aIndex);
         if (!item) return 0;
         return item.level;
       }
       return 0;
     },
     getImageSrc(aIndex, aColumn) {},
+    getProgressMode(aIndex, aColumn) {},
     getCellValue(aIndex, aColumn) {},
     setTree(aTree) {},
     toggleOpenState(aIndex) {
       if (!this._filtered) {
         var item = this._getItemAtIndex(aIndex);
         if (!item) return;
         this._invalidateCache(aIndex);
         var multiplier = item.open ? -1 : 1;
diff --git a/browser/components/preferences/in-content/search.js b/browser/components/preferences/in-content/search.js
--- a/browser/components/preferences/in-content/search.js
+++ b/browser/components/preferences/in-content/search.js
@@ -638,16 +638,17 @@ EngineView.prototype = {
   isContainer(index) { return false; },
   isContainerOpen(index) { return false; },
   isContainerEmpty(index) { return false; },
   isSeparator(index) { return false; },
   isSorted(index) { return false; },
   getParentIndex(index) { return -1; },
   hasNextSibling(parentIndex, index) { return false; },
   getLevel(index) { return 0; },
+  getProgressMode(index, column) { },
   getCellValue(index, column) {
     if (column.id == "engineShown")
       return this._engineStore.engines[index].shown;
     return undefined;
   },
   toggleOpenState(index) { },
   cycleHeader(column) { },
   selectionChanged() { },
diff --git a/browser/components/preferences/permissions.js b/browser/components/preferences/permissions.js
--- a/browser/components/preferences/permissions.js
+++ b/browser/components/preferences/permissions.js
@@ -42,16 +42,17 @@ var gPermissionManager = {
       return "";
     },
 
     isSeparator(aIndex) { return false; },
     isSorted() { return false; },
     isContainer(aIndex) { return false; },
     setTree(aTree) {},
     getImageSrc(aRow, aColumn) {},
+    getProgressMode(aRow, aColumn) {},
     getCellValue(aRow, aColumn) {},
     cycleHeader(column) {},
     getRowProperties(row) { return ""; },
     getColumnProperties(column) { return ""; },
     getCellProperties(row, column) {
       if (column.element.getAttribute("id") == "siteCol")
         return "ltr";
 
diff --git a/browser/components/preferences/siteDataRemoveSelected.js b/browser/components/preferences/siteDataRemoveSelected.js
--- a/browser/components/preferences/siteDataRemoveSelected.js
+++ b/browser/components/preferences/siteDataRemoveSelected.js
@@ -179,16 +179,17 @@ let gSiteDataRemoveSelected = {
       return false;
     },
     drop() {},
     getRowProperties() {},
     getCellProperties() {},
     getColumnProperties() {},
     hasPreviousSibling(index) {},
     getImageSrc() {},
+    getProgressMode() {},
     getCellValue() {},
     cycleHeader() {},
     selectionChanged() {},
     cycleCell() {},
     isEditable() {},
     isSelectable() {},
     setCellValue() {},
     setCellText() {},
diff --git a/browser/components/preferences/translation.js b/browser/components/preferences/translation.js
--- a/browser/components/preferences/translation.js
+++ b/browser/components/preferences/translation.js
@@ -57,16 +57,17 @@ Tree.prototype = {
   isSorted() {
     return false;
   },
   isContainer(aIndex) {
     return false;
   },
   setTree(aTree) {},
   getImageSrc(aRow, aColumn) {},
+  getProgressMode(aRow, aColumn) {},
   getCellValue(aRow, aColumn) {},
   cycleHeader(column) {},
   getRowProperties(row) {
     return "";
   },
   getColumnProperties(column) {
     return "";
   },
diff --git a/browser/components/sessionstore/content/aboutSessionRestore.js b/browser/components/sessionstore/content/aboutSessionRestore.js
--- a/browser/components/sessionstore/content/aboutSessionRestore.js
+++ b/browser/components/sessionstore/content/aboutSessionRestore.js
@@ -355,15 +355,16 @@ var treeView = {
   },
 
   getImageSrc(idx, column) {
     if (column.id == "title")
       return gTreeData[idx].src || null;
     return null;
   },
 
+  getProgressMode(idx, column) { },
   cycleHeader(column) { },
   cycleCell(idx, column) { },
   selectionChanged() { },
   performAction(action) { },
   performActionOnCell(action, index, column) { },
   getColumnProperties(column) { return ""; }
 };
diff --git a/dom/webidl/TreeView.webidl b/dom/webidl/TreeView.webidl
--- a/dom/webidl/TreeView.webidl
+++ b/dom/webidl/TreeView.webidl
@@ -118,16 +118,26 @@ interface TreeView
    * The image path for a given cell. For defining an icon for a cell.
    * If the empty string is returned, the :moz-tree-image pseudoelement
    * will be used.
    */
   [Throws]
   DOMString getImageSrc(long row, TreeColumn column);
 
   /**
+   * The progress mode for a given cell. This method is only called for
+   * columns of type |progressmeter|.
+   */
+  const short PROGRESS_NORMAL = 1;
+  const short PROGRESS_UNDETERMINED = 2;
+  const short PROGRESS_NONE = 3;
+  [Throws]
+  long getProgressMode(long row, TreeColumn column);
+
+  /**
    * The value for a given cell. This method is only called for columns
    * of type other than |text|.
    */
   [Throws]
   DOMString getCellValue(long row, TreeColumn column);
 
   /**
    * The text for a given cell.  If a column consists only of an image, then
diff --git a/layout/inspector/inDOMView.cpp b/layout/inspector/inDOMView.cpp
--- a/layout/inspector/inDOMView.cpp
+++ b/layout/inspector/inDOMView.cpp
@@ -345,16 +345,22 @@ inDOMView::GetColumnProperties(nsITreeCo
 
 NS_IMETHODIMP
 inDOMView::GetImageSrc(int32_t row, nsITreeColumn* col, nsAString& _retval)
 {
   return NS_OK;
 }
 
 NS_IMETHODIMP
+inDOMView::GetProgressMode(int32_t row, nsITreeColumn* col, int32_t* _retval)
+{
+  return NS_OK;
+}
+
+NS_IMETHODIMP
 inDOMView::GetCellValue(int32_t row, nsITreeColumn* col, nsAString& _retval)
 {
   return NS_OK;
 }
 
 NS_IMETHODIMP
 inDOMView::GetCellText(int32_t row, nsITreeColumn* col, nsAString& _retval)
 {
diff --git a/layout/style/nsCSSAnonBoxList.h b/layout/style/nsCSSAnonBoxList.h
--- a/layout/style/nsCSSAnonBoxList.h
+++ b/layout/style/nsCSSAnonBoxList.h
@@ -120,16 +120,17 @@ CSS_ANON_BOX(mozTreeRow, ":-moz-tree-row
 CSS_ANON_BOX(mozTreeSeparator, ":-moz-tree-separator")
 CSS_ANON_BOX(mozTreeCell, ":-moz-tree-cell")
 CSS_ANON_BOX(mozTreeIndentation, ":-moz-tree-indentation")
 CSS_ANON_BOX(mozTreeLine, ":-moz-tree-line")
 CSS_ANON_BOX(mozTreeTwisty, ":-moz-tree-twisty")
 CSS_ANON_BOX(mozTreeImage, ":-moz-tree-image")
 CSS_ANON_BOX(mozTreeCellText, ":-moz-tree-cell-text")
 CSS_ANON_BOX(mozTreeCheckbox, ":-moz-tree-checkbox")
+CSS_ANON_BOX(mozTreeProgressmeter, ":-moz-tree-progressmeter")
 CSS_ANON_BOX(mozTreeDropFeedback, ":-moz-tree-drop-feedback")
 #endif
 
 CSS_ANON_BOX(mozSVGMarkerAnonChild, ":-moz-svg-marker-anon-child")
 CSS_ANON_BOX(mozSVGOuterSVGAnonChild, ":-moz-svg-outer-svg-anon-child")
 CSS_ANON_BOX(mozSVGForeignContent, ":-moz-svg-foreign-content")
 CSS_ANON_BOX(mozSVGText, ":-moz-svg-text")
 
diff --git a/layout/xul/tree/crashtests/454186-1.xul b/layout/xul/tree/crashtests/454186-1.xul
new file mode 100644
--- /dev/null
+++ b/layout/xul/tree/crashtests/454186-1.xul
@@ -0,0 +1,23 @@
+<?xml version="1.0"?>
+<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
+<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
+
+<tree flex="1">
+  <treecols>
+    <treecol label="test" flex="1" type="progressmeter" />
+  </treecols>
+  <treechildren>
+    <treeitem>
+      <treerow>
+        <treecell value="50" mode="normal" />
+      </treerow>
+    </treeitem>
+    <treeitem>
+      <treerow>
+        <treecell mode="undetermined" />
+      </treerow>
+    </treeitem>
+  </treechildren>
+</tree>
+
+</window>
diff --git a/layout/xul/tree/crashtests/crashtests.list b/layout/xul/tree/crashtests/crashtests.list
--- a/layout/xul/tree/crashtests/crashtests.list
+++ b/layout/xul/tree/crashtests/crashtests.list
@@ -9,15 +9,16 @@ load 391178-2.xul
 load 393665-1.xul
 load 399227-1.xul
 load 399227-2.xul
 load 399692-1.xhtml
 load 399715-1.xhtml
 load 409807-1.xul
 load 414170-1.xul
 load 430394-1.xul
+load 454186-1.xul
 load 479931-1.xhtml
 load 509602-1.xul
 load 585815.html
 load 601427.html
 load 730441-1.xul
 load 730441-2.xul
 load 730441-3.xul
diff --git a/layout/xul/tree/nsITreeColumns.idl b/layout/xul/tree/nsITreeColumns.idl
--- a/layout/xul/tree/nsITreeColumns.idl
+++ b/layout/xul/tree/nsITreeColumns.idl
@@ -24,17 +24,18 @@ interface nsITreeColumn : nsISupports
 
   readonly attribute boolean primary;
   readonly attribute boolean cycler;
   readonly attribute boolean editable;
   readonly attribute boolean selectable;
 
   const short TYPE_TEXT                = 1;
   const short TYPE_CHECKBOX            = 2;
-  const short TYPE_PASSWORD            = 3;
+  const short TYPE_PROGRESSMETER       = 3;
+  const short TYPE_PASSWORD            = 4;
   readonly attribute short type;
 
   nsITreeColumn getNext();
   nsITreeColumn getPrevious();
 
   void invalidate();
 };
 
diff --git a/layout/xul/tree/nsITreeView.idl b/layout/xul/tree/nsITreeView.idl
--- a/layout/xul/tree/nsITreeView.idl
+++ b/layout/xul/tree/nsITreeView.idl
@@ -110,16 +110,25 @@ interface nsITreeView : nsISupports
   /**
    * The image path for a given cell. For defining an icon for a cell.
    * If the empty string is returned, the :moz-tree-image pseudoelement
    * will be used.
    */
   AString getImageSrc(in long row, in nsITreeColumn col);
 
   /**
+   * The progress mode for a given cell. This method is only called for
+   * columns of type |progressmeter|.
+   */
+  const short PROGRESS_NORMAL = 1;
+  const short PROGRESS_UNDETERMINED = 2;
+  const short PROGRESS_NONE = 3;
+  long getProgressMode(in long row, in nsITreeColumn col);
+
+  /**
    * The value for a given cell. This method is only called for columns
    * of type other than |text|.
    */
   AString getCellValue(in long row, in nsITreeColumn col);
 
   /**
    * The text for a given cell.  If a column consists only of an image, then
    * the empty string is returned.  
diff --git a/layout/xul/tree/nsTreeBodyFrame.cpp b/layout/xul/tree/nsTreeBodyFrame.cpp
--- a/layout/xul/tree/nsTreeBodyFrame.cpp
+++ b/layout/xul/tree/nsTreeBodyFrame.cpp
@@ -2028,16 +2028,28 @@ nsTreeBodyFrame::PrefillPropertyArray(in
 
       if (aRowIndex != -1) {
         nsAutoString value;
         mView->GetCellValue(aRowIndex, aCol, value);
         if (value.EqualsLiteral("true"))
           mScratchArray.AppendElement(nsGkAtoms::checked);
       }
     }
+    else if (aCol->GetType() == nsITreeColumn::TYPE_PROGRESSMETER) {
+      mScratchArray.AppendElement(nsGkAtoms::progressmeter);
+
+      if (aRowIndex != -1) {
+        int32_t state;
+        mView->GetProgressMode(aRowIndex, aCol, &state);
+        if (state == nsITreeView::PROGRESS_NORMAL)
+          mScratchArray.AppendElement(nsGkAtoms::progressNormal);
+        else if (state == nsITreeView::PROGRESS_UNDETERMINED)
+          mScratchArray.AppendElement(nsGkAtoms::progressUndetermined);
+      }
+    }
 
     // Read special properties from attributes on the column content node
     if (aCol->mContent->IsElement() &&
         aCol->mContent->AsElement()->AttrValueIs(kNameSpaceID_None,
                                                  nsGkAtoms::insertbefore,
                                                  nsGkAtoms::_true,
                                                  eCaseMatters))
       mScratchArray.AppendElement(nsGkAtoms::insertbefore);
@@ -3401,16 +3413,33 @@ nsTreeBodyFrame::PaintCell(int32_t      
         case nsITreeColumn::TYPE_PASSWORD:
           result &= PaintText(aRowIndex, aColumn, elementRect, aPresContext,
                               aRenderingContext, aDirtyRect, currX);
           break;
         case nsITreeColumn::TYPE_CHECKBOX:
           result &= PaintCheckbox(aRowIndex, aColumn, elementRect, aPresContext,
                                   aRenderingContext, aDirtyRect);
           break;
+        case nsITreeColumn::TYPE_PROGRESSMETER:
+          int32_t state;
+          mView->GetProgressMode(aRowIndex, aColumn, &state);
+          switch (state) {
+            case nsITreeView::PROGRESS_NORMAL:
+            case nsITreeView::PROGRESS_UNDETERMINED:
+              result &= PaintProgressMeter(aRowIndex, aColumn, elementRect,
+                                           aPresContext, aRenderingContext,
+                                           aDirtyRect, aBuilder);
+              break;
+            case nsITreeView::PROGRESS_NONE:
+            default:
+              result &= PaintText(aRowIndex, aColumn, elementRect, aPresContext,
+                                  aRenderingContext, aDirtyRect, currX);
+              break;
+          }
+          break;
       }
     }
   }
 
   aCurrX = currX;
 
   return result;
 }
@@ -3900,16 +3929,120 @@ nsTreeBodyFrame::PaintCheckbox(int32_t  
         image, SamplingFilter::POINT, pt, &aDirtyRect,
         imgIContainer::FLAG_NONE, &imageSize);
   }
 
   return result;
 }
 
 ImgDrawResult
+nsTreeBodyFrame::PaintProgressMeter(int32_t               aRowIndex,
+                                    nsTreeColumn*         aColumn,
+                                    const nsRect&         aProgressMeterRect,
+                                    nsPresContext*        aPresContext,
+                                    gfxContext&           aRenderingContext,
+                                    const nsRect&         aDirtyRect,
+                                    nsDisplayListBuilder* aBuilder)
+{
+  NS_PRECONDITION(aColumn && aColumn->GetFrame(), "invalid column passed");
+
+  // Resolve style for the progress meter.  It contains all the info we need
+  // to lay ourselves out and to paint.
+  nsStyleContext* meterContext = GetPseudoStyleContext(nsCSSAnonBoxes::mozTreeProgressmeter);
+
+  // Obtain the margins for the progress meter and then deflate our rect by that
+  // amount. The progress meter is assumed to be contained within the deflated
+  // rect.
+  nsRect meterRect(aProgressMeterRect);
+  nsMargin meterMargin;
+  meterContext->StyleMargin()->GetMargin(meterMargin);
+  meterRect.Deflate(meterMargin);
+
+  // Paint our borders and background for our progress meter rect.
+  ImgDrawResult result = PaintBackgroundLayer(meterContext, aPresContext,
+                                           aRenderingContext, meterRect,
+                                           aDirtyRect);
+
+  // Time to paint our progress.
+  int32_t state;
+  mView->GetProgressMode(aRowIndex, aColumn, &state);
+  if (state == nsITreeView::PROGRESS_NORMAL) {
+    // Adjust the rect for its border and padding.
+    AdjustForBorderPadding(meterContext, meterRect);
+
+    // Now obtain the value for our cell.
+    nsAutoString value;
+    mView->GetCellValue(aRowIndex, aColumn, value);
+
+    nsresult rv;
+    int32_t intValue = value.ToInteger(&rv);
+    if (intValue < 0)
+      intValue = 0;
+    else if (intValue > 100)
+      intValue = 100;
+
+    nscoord meterWidth = NSToCoordRound((float)intValue / 100 * meterRect.width);
+    if (StyleVisibility()->mDirection == NS_STYLE_DIRECTION_RTL)
+      meterRect.x += meterRect.width - meterWidth; // right align
+    meterRect.width = meterWidth;
+    bool useImageRegion = true;
+    nsCOMPtr<imgIContainer> image;
+    GetImage(aRowIndex, aColumn, true, meterContext, useImageRegion, getter_AddRefs(image));
+    if (image) {
+      int32_t width, height;
+      image->GetWidth(&width);
+      image->GetHeight(&height);
+      nsSize size(width*nsDeviceContext::AppUnitsPerCSSPixel(),
+                  height*nsDeviceContext::AppUnitsPerCSSPixel());
+      uint32_t drawFlags = aBuilder && aBuilder->IsPaintingToWindow() ?
+        imgIContainer::FLAG_HIGH_QUALITY_SCALING : imgIContainer::FLAG_NONE;
+      result &=
+        nsLayoutUtils::DrawImage(aRenderingContext, meterContext,
+          aPresContext, image,
+          nsLayoutUtils::GetSamplingFilterForFrame(this),
+          nsRect(meterRect.TopLeft(), size), meterRect, meterRect.TopLeft(),
+          aDirtyRect, drawFlags);
+    } else {
+      DrawTarget* drawTarget = aRenderingContext.GetDrawTarget();
+      int32_t appUnitsPerDevPixel = PresContext()->AppUnitsPerDevPixel();
+      Rect rect =
+        NSRectToSnappedRect(meterRect, appUnitsPerDevPixel, *drawTarget);
+      ColorPattern color(ToDeviceColor(meterContext->StyleColor()->mColor));
+      drawTarget->FillRect(rect, color);
+    }
+  }
+  else if (state == nsITreeView::PROGRESS_UNDETERMINED) {
+    // Adjust the rect for its border and padding.
+    AdjustForBorderPadding(meterContext, meterRect);
+
+    bool useImageRegion = true;
+    nsCOMPtr<imgIContainer> image;
+    GetImage(aRowIndex, aColumn, true, meterContext, useImageRegion, getter_AddRefs(image));
+    if (image) {
+      int32_t width, height;
+      image->GetWidth(&width);
+      image->GetHeight(&height);
+      nsSize size(width*nsDeviceContext::AppUnitsPerCSSPixel(),
+                  height*nsDeviceContext::AppUnitsPerCSSPixel());
+      uint32_t drawFlags = aBuilder && aBuilder->IsPaintingToWindow() ?
+        imgIContainer::FLAG_HIGH_QUALITY_SCALING : imgIContainer::FLAG_NONE;
+      result &=
+        nsLayoutUtils::DrawImage(aRenderingContext, meterContext,
+          aPresContext, image,
+          nsLayoutUtils::GetSamplingFilterForFrame(this),
+          nsRect(meterRect.TopLeft(), size), meterRect, meterRect.TopLeft(),
+          aDirtyRect, drawFlags);
+    }
+  }
+
+  return result;
+}
+
+
+ImgDrawResult
 nsTreeBodyFrame::PaintDropFeedback(const nsRect&        aDropFeedbackRect,
                                    nsPresContext*      aPresContext,
                                    gfxContext&          aRenderingContext,
                                    const nsRect&        aDirtyRect,
                                    nsPoint              aPt)
 {
   // Paint the drop feedback in between rows.
 
diff --git a/layout/xul/tree/nsTreeBodyFrame.h b/layout/xul/tree/nsTreeBodyFrame.h
--- a/layout/xul/tree/nsTreeBodyFrame.h
+++ b/layout/xul/tree/nsTreeBodyFrame.h
@@ -272,16 +272,25 @@ protected:
   // This method paints the checkbox inside a particular cell of the tree.
   ImgDrawResult PaintCheckbox(int32_t              aRowIndex,
                            nsTreeColumn*        aColumn,
                            const nsRect&        aCheckboxRect,
                            nsPresContext*       aPresContext,
                            gfxContext&          aRenderingContext,
                            const nsRect&        aDirtyRect);
 
+  // This method paints the progress meter inside a particular cell of the tree.
+  ImgDrawResult PaintProgressMeter(int32_t               aRowIndex,
+                                nsTreeColumn*         aColumn,
+                                const nsRect&         aProgressMeterRect,
+                                nsPresContext*        aPresContext,
+                                gfxContext&           aRenderingContext,
+                                const nsRect&         aDirtyRect,
+                                nsDisplayListBuilder* aBuilder);
+
   // This method paints a drop feedback of the tree.
   ImgDrawResult PaintDropFeedback(const nsRect&        aDropFeedbackRect,
                                nsPresContext*       aPresContext,
                                gfxContext&          aRenderingContext,
                                const nsRect&        aDirtyRect,
                                nsPoint              aPt);
 
   // This method is called with a specific style context and rect to
diff --git a/layout/xul/tree/nsTreeColumns.cpp b/layout/xul/tree/nsTreeColumns.cpp
--- a/layout/xul/tree/nsTreeColumns.cpp
+++ b/layout/xul/tree/nsTreeColumns.cpp
@@ -315,24 +315,25 @@ nsTreeColumn::Invalidate()
 
   mOverflow =
     mContent->AsElement()->AttrValueIs(kNameSpaceID_None, nsGkAtoms::overflow,
                                        nsGkAtoms::_true, eCaseMatters);
 
   // Figure out our column type. Default type is text.
   mType = nsITreeColumn::TYPE_TEXT;
   static Element::AttrValuesArray typestrings[] =
-    {&nsGkAtoms::checkbox, &nsGkAtoms::password,
+    {&nsGkAtoms::checkbox, &nsGkAtoms::progressmeter, &nsGkAtoms::password,
      nullptr};
   switch (mContent->AsElement()->FindAttrValueIn(kNameSpaceID_None,
                                                  nsGkAtoms::type,
                                                  typestrings,
                                                  eCaseMatters)) {
     case 0: mType = nsITreeColumn::TYPE_CHECKBOX; break;
-    case 1: mType = nsITreeColumn::TYPE_PASSWORD; break;
+    case 1: mType = nsITreeColumn::TYPE_PROGRESSMETER; break;
+    case 2: mType = nsITreeColumn::TYPE_PASSWORD; break;
   }
 
   // Fetch the crop style.
   mCropStyle = 0;
   static Element::AttrValuesArray cropstrings[] =
     {&nsGkAtoms::center, &nsGkAtoms::left, &nsGkAtoms::start, nullptr};
   switch (mContent->AsElement()->FindAttrValueIn(kNameSpaceID_None,
                                                  nsGkAtoms::crop, cropstrings,
diff --git a/layout/xul/tree/nsTreeContentView.cpp b/layout/xul/tree/nsTreeContentView.cpp
--- a/layout/xul/tree/nsTreeContentView.cpp
+++ b/layout/xul/tree/nsTreeContentView.cpp
@@ -490,16 +490,62 @@ nsTreeContentView::GetImageSrc(int32_t a
   RefPtr<nsTreeColumn> col = nsTreeColumn::From(aCol);
   NS_ENSURE_ARG(col);
 
   ErrorResult rv;
   GetImageSrc(aRow, *col, _retval, rv);
   return rv.StealNSResult();
 }
 
+int32_t
+nsTreeContentView::GetProgressMode(int32_t aRow, nsTreeColumn& aColumn,
+                                   ErrorResult& aError)
+{
+  if (!IsValidRowIndex(aRow)) {
+    aError.Throw(NS_ERROR_INVALID_ARG);
+    return 0;
+  }
+
+  Row* row = mRows[aRow].get();
+
+  nsIContent* realRow =
+    nsTreeUtils::GetImmediateChild(row->mContent, nsGkAtoms::treerow);
+  if (realRow) {
+    Element* cell = GetCell(realRow, aColumn);
+    if (cell) {
+      static Element::AttrValuesArray strings[] =
+        {&nsGkAtoms::normal, &nsGkAtoms::undetermined, nullptr};
+      switch (cell->FindAttrValueIn(kNameSpaceID_None, nsGkAtoms::mode,
+                                    strings, eCaseMatters)) {
+        case 0:
+        {
+          return nsITreeView::PROGRESS_NORMAL;
+        }
+        case 1:
+        {
+          return nsITreeView::PROGRESS_UNDETERMINED;
+        }
+      }
+    }
+  }
+
+  return nsITreeView::PROGRESS_NONE;
+}
+
+NS_IMETHODIMP
+nsTreeContentView::GetProgressMode(int32_t aRow, nsITreeColumn* aCol, int32_t* _retval)
+{
+  RefPtr<nsTreeColumn> col = nsTreeColumn::From(aCol);
+  NS_ENSURE_ARG(col);
+
+  ErrorResult rv;
+  *_retval = GetProgressMode(aRow, *col, rv);
+  return rv.StealNSResult();
+}
+
 void
 nsTreeContentView::GetCellValue(int32_t aRow, nsTreeColumn& aColumn,
                                 nsAString& aValue, ErrorResult& aError)
 {
   if (!IsValidRowIndex(aRow)) {
     aError.Throw(NS_ERROR_INVALID_ARG);
     return;
   }
diff --git a/layout/xul/tree/nsTreeContentView.h b/layout/xul/tree/nsTreeContentView.h
--- a/layout/xul/tree/nsTreeContentView.h
+++ b/layout/xul/tree/nsTreeContentView.h
@@ -77,16 +77,18 @@ class nsTreeContentView final : public n
               mozilla::dom::DataTransfer* aDataTransfer,
               mozilla::ErrorResult& aError);
     int32_t GetParentIndex(int32_t aRow, mozilla::ErrorResult& aError);
     bool HasNextSibling(int32_t aRow, int32_t aAfterIndex,
                         mozilla::ErrorResult& aError);
     int32_t GetLevel(int32_t aRow, mozilla::ErrorResult& aError);
     void GetImageSrc(int32_t aRow, nsTreeColumn& aColumn, nsAString& aSrc,
                      mozilla::ErrorResult& aError);
+    int32_t GetProgressMode(int32_t aRow, nsTreeColumn& aColumn,
+                            mozilla::ErrorResult& aError);
     void GetCellValue(int32_t aRow, nsTreeColumn& aColumn, nsAString& aValue,
                       mozilla::ErrorResult& aError);
     void GetCellText(int32_t aRow, nsTreeColumn& aColumn, nsAString& aText,
                      mozilla::ErrorResult& aError);
     void SetTree(mozilla::dom::TreeBoxObject* aTree,
                  mozilla::ErrorResult& aError);
     void ToggleOpenState(int32_t aRow, mozilla::ErrorResult& aError);
     void CycleHeader(nsTreeColumn& aColumn, mozilla::ErrorResult& aError);
diff --git a/security/manager/pki/nsASN1Tree.cpp b/security/manager/pki/nsASN1Tree.cpp
--- a/security/manager/pki/nsASN1Tree.cpp
+++ b/security/manager/pki/nsASN1Tree.cpp
@@ -263,16 +263,22 @@ nsNSSASN1Tree::GetLevel(int32_t index, i
 
 NS_IMETHODIMP
 nsNSSASN1Tree::GetImageSrc(int32_t, nsITreeColumn*, nsAString&)
 {
   return NS_OK;
 }
 
 NS_IMETHODIMP
+nsNSSASN1Tree::GetProgressMode(int32_t, nsITreeColumn*, int32_t*)
+{
+  return NS_OK;
+}
+
+NS_IMETHODIMP
 nsNSSASN1Tree::GetCellValue(int32_t, nsITreeColumn*, nsAString&)
 {
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsNSSASN1Tree::GetCellText(int32_t row, nsITreeColumn*, nsAString& _retval)
 {
diff --git a/security/manager/ssl/nsCertTree.cpp b/security/manager/ssl/nsCertTree.cpp
--- a/security/manager/ssl/nsCertTree.cpp
+++ b/security/manager/ssl/nsCertTree.cpp
@@ -996,16 +996,22 @@ NS_IMETHODIMP
 nsCertTree::GetImageSrc(int32_t row, nsITreeColumn* col,
                         nsAString& _retval)
 {
   _retval.Truncate();
   return NS_OK;
 }
 
 NS_IMETHODIMP
+nsCertTree::GetProgressMode(int32_t row, nsITreeColumn* col, int32_t* _retval)
+{
+  return NS_OK;
+}
+
+NS_IMETHODIMP
 nsCertTree::GetCellValue(int32_t row, nsITreeColumn* col,
                          nsAString& _retval)
 {
   _retval.Truncate();
   return NS_OK;
 }
 
 NS_IMETHODIMP
diff --git a/toolkit/components/autocomplete/nsAutoCompleteController.cpp b/toolkit/components/autocomplete/nsAutoCompleteController.cpp
--- a/toolkit/components/autocomplete/nsAutoCompleteController.cpp
+++ b/toolkit/components/autocomplete/nsAutoCompleteController.cpp
@@ -942,16 +942,23 @@ nsAutoCompleteController::GetImageSrc(in
 
   if (NS_LITERAL_STRING("treecolAutoCompleteValue").Equals(colID))
     return GetImageAt(row, _retval);
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
+nsAutoCompleteController::GetProgressMode(int32_t row, nsITreeColumn* col, int32_t* _retval)
+{
+  NS_NOTREACHED("tree has no progress cells");
+  return NS_OK;
+}
+
+NS_IMETHODIMP
 nsAutoCompleteController::GetCellValue(int32_t row, nsITreeColumn* col, nsAString& _retval)
 {
   NS_NOTREACHED("all of our cells are text");
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsAutoCompleteController::GetCellText(int32_t row, nsITreeColumn* col, nsAString& _retval)
diff --git a/toolkit/components/passwordmgr/content/passwordManager.js b/toolkit/components/passwordmgr/content/passwordManager.js
--- a/toolkit/components/passwordmgr/content/passwordManager.js
+++ b/toolkit/components/passwordmgr/content/passwordManager.js
@@ -150,16 +150,17 @@ let signonsTreeView = {
     PlacesUtils.promiseFaviconLinkUrl(signon.hostname)
       .then(faviconURI => {
         this._faviconMap.set(signon.hostname, faviconURI.spec);
         this._invalidateTask.arm();
       }).catch(Cu.reportError);
 
     return "";
   },
+  getProgressMode(row, column) {},
   getCellValue(row, column) {},
   getCellText(row, column) {
     let time;
     let signon = GetVisibleLogins()[row];
     switch (column.id) {
       case "siteCol":
         return signon.httpRealm ?
                (signon.hostname + " (" + signon.httpRealm + ")") :
diff --git a/toolkit/content/tests/chrome/test_tree_view.xul b/toolkit/content/tests/chrome/test_tree_view.xul
--- a/toolkit/content/tests/chrome/test_tree_view.xul
+++ b/toolkit/content/tests/chrome/test_tree_view.xul
@@ -30,16 +30,17 @@ var view =
   setTree: function(tree) { this.tree = tree; },
   isContainer: function(row) { return false; },
   isContainerOpen: function(row) { return false; },
   isContainerEmpty: function(row) { return false; },
   isSeparator: function(row) { return false; },
   isSorted: function(row) { return false; },
   isSelectable: function(row, column) { return true; },
   isEditable: function(row, column) { return row != 2 || column.index != 1; },
+  getProgressMode: function(row, column) { return Components.interfaces.nsITreeView.PROGRESS_NORMAL; },
   getParentIndex: function(row, column) { return -1; },
   getLevel: function(row) { return 0; },
   hasNextSibling: function(row, column) { return row != this.rowCount - 1; },
   getImageSrc: function(row, column) { return ""; },
   cycleHeader: function(column) { },
   getRowProperties: function(row) { return ""; },
   getCellProperties: function(row, column) { return ""; },
   getColumnProperties: function(column)
@@ -59,17 +60,18 @@ function getCustomTreeViewCellInfo()
   for (var row = 0; row < view.rowCount; row++) {
     var cellInfo = [ ];
     for (var column = 0; column < 1; column++) {
       cellInfo.push({ label: "" + view.treeData[row % 4][column],
                       value: "",
                       properties: "",
                       editable: row != 2 || column.index != 1,
                       selectable: true,
-                      image: "" });
+                      image: "",
+                      mode: Components.interfaces.nsITreeView.PROGRESS_NORMAL });
     }
 
     obj.rows.push({ cells: cellInfo,
                     properties: "",
                     container: false,
                     separator: false,
                     children: null,
                     level: 0,
diff --git a/toolkit/content/tests/widgets/tree_shared.js b/toolkit/content/tests/widgets/tree_shared.js
--- a/toolkit/content/tests/widgets/tree_shared.js
+++ b/toolkit/content/tests/widgets/tree_shared.js
@@ -14,17 +14,17 @@ var columns_hiertree =
 [
   { name: "name", label: "Name", primary: true, key: true, properties: "one two" },
   { name: "address", label: "Address" },
   { name: "planet", label: "Planet" },
   { name: "gender", label: "Gender", cycler: true }
 ];
 
 // XXXndeakin still to add some tests for:
-//   cycler columns, checkbox cells
+//   cycler columns, checkbox cells, progressmeter cells
 
 // this test function expects a tree to have 8 rows in it when it isn't
 // expanded. The tree should only display four rows at a time. If editable,
 // the cell at row 1 and column 0 must be editable, and the cell at row 2 and
 // column 1 must not be editable.
 function testtag_tree(treeid, treerowinfoid, seltype, columnstype, testid) {
   // Stop keystrokes that aren't handled by the tree from leaking out and
   // scrolling the main Mochitests window!
@@ -908,16 +908,17 @@ function testtag_tree_TreeView_rows(tree
   var checkCellMethods =
   {
     getCellText(row, cell) { return cell.label; },
     getCellValue(row, cell) { return cell.value; },
     getCellProperties(row, cell) { return cell.properties; },
     isEditable(row, cell) { return cell.editable; },
     isSelectable(row, cell) { return cell.selectable; },
     getImageSrc(row, cell) { return cell.image; },
+    getProgressMode(row, cell) { return cell.mode; }
   };
 
   var failedMethods = { };
   var checkMethod, actual, expected;
   var toggleOpenStateOK = true;
 
   for (r = startRow; r < length; r++) {
     var row = rowInfo.rows[r];
diff --git a/toolkit/themes/linux/global/tree.css b/toolkit/themes/linux/global/tree.css
--- a/toolkit/themes/linux/global/tree.css
+++ b/toolkit/themes/linux/global/tree.css
@@ -169,16 +169,31 @@ treechildren::-moz-tree-cell-text(primar
 
 treechildren::-moz-tree-drop-feedback {
   background-color: Highlight;
   width: 50px;
   height: 2px;
   margin-inline-start: 5px;
 }
 
+/* ::::: tree progress meter ::::: */
+
+treechildren::-moz-tree-progressmeter {
+  margin: 2px 4px;
+  padding: 1px;
+  border: 1px solid;
+  border-color: ThreeDShadow ThreeDHighlight ThreeDHighlight ThreeDShadow;
+  background-color: -moz-Dialog;
+  color: ThreeDShadow;
+}
+
+treechildren::-moz-tree-cell-text(progressmeter) {
+  margin: 2px 4px;
+}
+
 /* ::::: tree columns ::::: */
 
 treecol,
 treecolpicker {
   -moz-appearance: treeheadercell;
   -moz-box-align: center;
   -moz-box-pack: center;
   color: -moz-DialogText;
diff --git a/toolkit/themes/osx/global/tree.css b/toolkit/themes/osx/global/tree.css
--- a/toolkit/themes/osx/global/tree.css
+++ b/toolkit/themes/osx/global/tree.css
@@ -139,16 +139,29 @@ treechildren::-moz-tree-cell-text(primar
 
 treechildren::-moz-tree-drop-feedback {
   background-color: #A1A1A1;
   width: 50px;
   height: 2px;
   margin-inline-start: 5px;
 }
 
+/* ::::: tree progress meter ::::: */
+
+treechildren::-moz-tree-progressmeter {
+  margin: 2px 4px;
+  border: 1px solid;
+  border-color: ThreeDShadow ThreeDHighlight ThreeDHighlight ThreeDShadow;
+}
+
+treechildren::-moz-tree-cell-text(progressmeter) {
+  margin: 2px 4px;
+  -moz-appearance: progressbar;
+}
+
 /* ::::: tree columns ::::: */
 
 treecol,
 treecolpicker {
   -moz-appearance: treeheadercell;
   -moz-box-align: center;
   -moz-box-pack: center;
   color: -moz-DialogText;
diff --git a/toolkit/themes/windows/global/tree.css b/toolkit/themes/windows/global/tree.css
--- a/toolkit/themes/windows/global/tree.css
+++ b/toolkit/themes/windows/global/tree.css
@@ -168,16 +168,31 @@ treechildren::-moz-tree-cell-text(primar
 
 treechildren::-moz-tree-drop-feedback {
   background-color: Highlight;
   width: 50px;
   height: 2px;
   margin-inline-start: 5px;
 }
 
+/* ::::: tree progress meter ::::: */
+
+treechildren::-moz-tree-progressmeter {
+  margin: 2px 4px;
+  padding: 1px;
+  border: 1px solid;
+  border-color: ThreeDShadow ThreeDHighlight ThreeDHighlight ThreeDShadow;
+  background-color: -moz-Dialog;
+  color: ThreeDShadow;
+}
+
+treechildren::-moz-tree-cell-text(progressmeter) {
+  margin: 2px 4px;
+}
+
 /* ::::: tree columns ::::: */
 
 treecol,
 treecolpicker {
   -moz-appearance: treeheadercell;
   -moz-box-align: center;
   -moz-box-pack: center;
   color: -moz-DialogText;
# HG changeset patch
# User RealDolos <dolos@cock.li>
# Date 1517419857 -3600
#      Wed Jan 31 18:30:57 2018 +0100
# Node ID eb5a693a2d1bdc33b6b428b32bd6088fa1f8ff6f
# Parent  ef6749a6e329daf0be29041a07c5403f2158ec76
Readd statusbar bindings

Backed out changeset 38f11a0d4111
Backed out changeset 2e0ea0c63d14

diff --git a/accessible/tests/mochitest/role/test_general.xul b/accessible/tests/mochitest/role/test_general.xul
--- a/accessible/tests/mochitest/role/test_general.xul
+++ b/accessible/tests/mochitest/role/test_general.xul
@@ -20,16 +20,18 @@
     {
       ok(!isAccessible("image"),
                       "image without tooltiptext shouldn't be accessible.");
       testRole("image-tooltiptext", ROLE_GRAPHIC);
       testRole("image-onclick", ROLE_PUSHBUTTON);
 
       ok(!isAccessible("statusbarpanel"),
                       "statusbarpanel shouldn't be accessible.");
+      testRole("statusbarpanel-iconic", ROLE_PUSHBUTTON);
+      testRole("statusbarpanel-iconic-text", ROLE_PUSHBUTTON);
       testRole("statusbar", ROLE_STATUSBAR);
 
       SimpleTest.finish();
     }
 
     SimpleTest.waitForExplicitFinish();
     addA11yLoadEvent(doTest);
   ]]>
@@ -50,13 +52,15 @@
     </pre>
   </body>
 
   <image id="image" src="../moz.png"/>
   <image id="image-tooltiptext" src="../moz.png" tooltiptext="hello"/>
   <image id="image-onclick" src="../moz.png" onclick=""/>
 
   <statusbarpanel id="statusbarpanel"></statusbarpanel>
+  <statusbarpanel id="statusbarpanel-iconic" class="statusbarpanel-iconic"></statusbarpanel>
+  <statusbarpanel id="statusbarpanel-iconic-text" class="statusbarpanel-iconic-text"></statusbarpanel>
   <statusbar id="statusbar"></statusbar>
 
   </hbox>
 </window>
 
diff --git a/toolkit/content/widgets/general.xml b/toolkit/content/widgets/general.xml
--- a/toolkit/content/widgets/general.xml
+++ b/toolkit/content/widgets/general.xml
@@ -71,16 +71,68 @@
       <property name="webNavigation"
                 onget="return this.docShell.QueryInterface(Components.interfaces.nsIWebNavigation);"
                 readonly="true"/>
       <property name="contentDocument" readonly="true"
                 onget="return this.webNavigation.document;"/>
     </implementation>
   </binding>
 
+  <binding id="statusbarpanel" display="xul:button">
+    <content>
+      <children>
+        <xul:label xbl:inherits="value=label,crop" crop="right" flex="1"/>
+      </children>
+    </content>
+
+    <implementation>
+      <property name="label"
+                onget="return this.getAttribute('label');"
+                onset="this.setAttribute('label',val); return val;"/>
+      <property name="image"
+                onget="return this.getAttribute('image');"
+                onset="this.setAttribute('image',val); return val;"/>
+      <property name="src"
+                onget="return this.getAttribute('src');"
+                onset="this.setAttribute('src',val); return val;"/>
+    </implementation>
+  </binding>
+
+  <binding id="statusbarpanel-menu-iconic" display="xul:menu"
+           extends="chrome://global/content/bindings/general.xml#statusbarpanel">
+    <content>
+      <xul:image class="statusbarpanel-icon" xbl:inherits="src,src=image"/>
+      <children/>
+    </content>
+  </binding>
+
+  <binding id="statusbar" role="xul:statusbar">
+    <content>
+      <children/>
+      <xul:statusbarpanel class="statusbar-resizerpanel">
+        <xul:resizer dir="bottomend"/>
+      </xul:statusbarpanel>
+    </content>
+  </binding>
+
+  <binding id="statusbarpanel-iconic" display="xul:button" role="xul:button"
+           extends="chrome://global/content/bindings/general.xml#statusbarpanel">
+    <content>
+      <xul:image class="statusbarpanel-icon" xbl:inherits="src,src=image"/>
+    </content>
+  </binding>
+
+  <binding id="statusbarpanel-iconic-text" display="xul:button" role="xul:button"
+           extends="chrome://global/content/bindings/general.xml#statusbarpanel">
+    <content>
+      <xul:image class="statusbarpanel-icon" xbl:inherits="src,src=image"/>
+      <xul:label class="statusbarpanel-text" xbl:inherits="value=label,crop"/>
+    </content>
+  </binding>
+
   <binding id="deck">
     <implementation>
       <property name="selectedIndex"
                 onget="return this.getAttribute('selectedIndex') || '0'">
         <setter>
         <![CDATA[
           if (this.selectedIndex == val)
             return val;
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -255,16 +255,17 @@ caption {
   -moz-box-orient: vertical;
 }
 
 /******** draggable elements *********/
 
 %ifndef MOZ_WIDGET_GTK
 titlebar,
 toolbar:not([nowindowdrag="true"]):not([customizing="true"]),
+statusbar:not([nowindowdrag="true"]),
 %endif
 windowdragbox {
   -moz-window-dragging: drag;
 }
 
 /* The list below is non-comprehensive and will probably need some tweaking. */
 toolbaritem,
 toolbarbutton,
@@ -499,16 +500,26 @@ panel[type="arrow"][side][animate="cance
   transform: none;
 }
 
 %endif
 panel[type="arrow"][animating] {
   pointer-events: none;
 }
 
+%ifdef XP_MACOSX
+.statusbar-resizerpanel {
+  display: none;
+}
+%else
+window[sizemode="maximized"] statusbarpanel.statusbar-resizerpanel {
+  visibility: collapse;
+}
+%endif
+
 /******** grid **********/
 
 grid {
   display: -moz-grid;
 }
 
 rows,
 columns {
@@ -914,16 +925,41 @@ arrowscrollbox {
 arrowscrollbox[clicktoscroll="true"] {
   -moz-binding: url("chrome://global/content/bindings/scrollbox.xml#arrowscrollbox-clicktoscroll");
 }
 
 autorepeatbutton {
   -moz-binding: url("chrome://global/content/bindings/scrollbox.xml#autorepeatbutton");
 }
 
+/********** statusbar **********/
+
+statusbar {
+  -moz-binding: url("chrome://global/content/bindings/general.xml#statusbar");
+%ifdef XP_MACOSX
+  padding-right: 14px;
+%endif
+}
+
+statusbarpanel {
+  -moz-binding: url("chrome://global/content/bindings/general.xml#statusbarpanel");
+}
+
+.statusbarpanel-iconic {
+  -moz-binding: url("chrome://global/content/bindings/general.xml#statusbarpanel-iconic");
+}
+
+.statusbarpanel-iconic-text {
+  -moz-binding: url("chrome://global/content/bindings/general.xml#statusbarpanel-iconic-text");
+}
+
+.statusbarpanel-menu-iconic {
+  -moz-binding: url("chrome://global/content/bindings/general.xml#statusbarpanel-menu-iconic");
+}
+
 /********** stringbundle **********/
 
 stringbundleset {
   visibility: collapse;
 }
 
 stringbundle {
   -moz-binding: url("chrome://global/content/bindings/stringbundle.xml#stringbundle");
diff --git a/toolkit/themes/linux/global/global.css b/toolkit/themes/linux/global/global.css
--- a/toolkit/themes/linux/global/global.css
+++ b/toolkit/themes/linux/global/global.css
@@ -35,18 +35,18 @@ progressmeter[mode="undetermined"] {
   --arrowpanel-border-color: ThreeDShadow;
 }
 
 /* ::::: root elements ::::: */
 
 window,
 page,
 dialog,
-prefwindow,
-wizard {
+wizard,
+prefwindow {
   -moz-appearance: window;
   background-color: -moz-Dialog;
   color: -moz-DialogText;
   font: message-box;
 }
 
 /* deprecated */
 window.dialog {
@@ -92,16 +92,47 @@ iframe {
 @supports -moz-bool-pref("layout.css.emulate-moz-box-with-flex") {
   /* In emulation, <iframe> is block instead of inline, so reset the width/height */
   iframe {
     width: auto;
     height: auto;
   }
 }
 
+/* ::::: statusbar ::::: */
+
+statusbar {
+  -moz-appearance: statusbar;
+  min-height: 22px;
+}
+
+statusbar:-moz-lwtheme {
+  -moz-appearance: none;
+}
+
+statusbarpanel {
+  -moz-appearance: statusbarpanel;
+  -moz-box-align: center;
+  -moz-box-pack: center;
+  padding: 0 4px;
+}
+
+.statusbar-resizerpanel {
+  -moz-box-align: end;
+  -moz-box-pack: end;
+  -moz-appearance: resizerpanel;
+  padding: 0;
+}
+
+.statusbarpanel-iconic,
+.statusbarpanel-iconic-text,
+.statusbarpanel-menu-iconic {
+  padding: 0 1px;
+}
+
 /* XXXBlake yeah, shoot me -- these don't belong here.  I'll move them later. */
 
 sidebarheader {
   min-height: 25px;
   text-shadow: none;
 }
 
 sidebarheader > label {
@@ -114,17 +145,18 @@ sidebarheader > label {
 
 toolbar[mode="text"] .toolbarbutton-text {
   padding: 0 !important;
   margin: 3px 5px !important;
 }
 
 /* ::::: miscellaneous formatting ::::: */
 
-:root:-moz-lwtheme {
+:root:-moz-lwtheme,
+statusbarpanel:-moz-lwtheme {
   -moz-appearance: none;
 }
 
 :root:-moz-lwtheme-darktext {
   text-shadow: 0 -0.5px 1.5px white;
 }
 
 :root:-moz-lwtheme-brighttext {
@@ -220,16 +252,20 @@ label[disabled="true"] {
 .box-padded {
   padding: 5px;
 }
 
 .spaced {
   margin: 3px 5px 4px;
 }
 
+.wizard-box {
+  padding: 20px 44px 10px;
+}
+
 .text-link {
   color: -moz-nativehyperlinktext;
   cursor: pointer;
 }
 
 .text-link:hover {
   text-decoration: underline;
 }
diff --git a/toolkit/themes/osx/global/global.css b/toolkit/themes/osx/global/global.css
--- a/toolkit/themes/osx/global/global.css
+++ b/toolkit/themes/osx/global/global.css
@@ -24,24 +24,31 @@ menulist > menupopup {
   --focus-ring-box-shadow: @focusRingShadow@;
 }
 
 /* ::::: root elements ::::: */
 
 window,
 page,
 dialog,
-prefwindow,
-wizard {
+wizard,
+prefwindow {
   -moz-appearance: dialog;
   background-color: #FFFFFF;
   color: -moz-DialogText;
   font: message-box;
 }
 
+prefwindow[type="child"] {
+  padding-top: 18px;
+  padding-bottom: 15px;
+  padding-inline-start: 18px;
+  padding-inline-end: 20px;
+}
+
 /* deprecated */
 window.dialog {
   padding-top: 8px;
   padding-bottom: 10px;
   padding-inline-start: 8px;
   padding-inline-end: 10px;
 }
 
@@ -87,16 +94,39 @@ iframe {
 @supports -moz-bool-pref("layout.css.emulate-moz-box-with-flex") {
   /* In emulation, <iframe> is block instead of inline, so reset the width/height */
   iframe {
     width: auto;
     height: auto;
   }
 }
 
+/* ::::: statusbar ::::: */
+
+statusbar {
+  min-width: 1px; /* DON'T DELETE!
+  Prevents hiding of scrollbars in browser when window is made smaller.*/
+  min-height: 15px !important;
+  margin: 0px !important;
+  /* need to use padding-inline-end when/if bug 631729 gets fixed: */
+  padding: 0px 16px 1px 1px;
+  -moz-appearance: statusbar;
+  text-shadow: rgba(255, 255, 255, 0.4) 0 1px;
+}
+
+statusbarpanel {
+  -moz-box-align: center;
+  -moz-box-pack: center;
+  padding: 0 4px;
+}
+
+.statusbarpanel-iconic {
+  padding: 0px;
+}
+
 /* ::::: miscellaneous formatting ::::: */
 
 sidebarheader {
   background-color: -moz-Dialog;
   color: -moz-dialogText;
   text-shadow: none;
 }
 
@@ -107,16 +137,23 @@ sidebarheader {
 :root:-moz-lwtheme-darktext {
   text-shadow: 0 -0.5px 1.5px white;
 }
 
 :root:-moz-lwtheme-brighttext {
   text-shadow: 1px 1px 1.5px black;
 }
 
+statusbar:-moz-lwtheme {
+  -moz-appearance: none;
+  background: none;
+  border-style: none;
+  text-shadow: inherit;
+}
+
 .inset {
   border: 1px solid ThreeDShadow;
   border-right-color: ThreeDHighlight;
   border-bottom-color: ThreeDHighlight;
   margin: 0 5px 5px;
 }
 
 .outset {
@@ -195,16 +232,20 @@ label[disabled="true"] {
 .box-padded {
   padding: 5px;
 }
 
 .spaced {
   margin: 3px 5px 4px;
 }
 
+.wizard-box {
+  padding: 20px 44px 10px;
+}
+
 .text-link {
   color: -moz-nativehyperlinktext;
   cursor: pointer;
 }
 
 .text-link:hover {
   text-decoration: underline;
 }
diff --git a/toolkit/themes/windows/global/global.css b/toolkit/themes/windows/global/global.css
--- a/toolkit/themes/windows/global/global.css
+++ b/toolkit/themes/windows/global/global.css
@@ -31,18 +31,18 @@ menulist > menupopup {
   }
 }
 
 /* ::::: root elements ::::: */
 
 window,
 page,
 dialog,
-prefwindow,
-wizard {
+wizard,
+prefwindow {
   -moz-appearance: window;
   background-color: -moz-Dialog;
   color: -moz-DialogText;
   font: message-box;
 }
 
 /* deprecated */
 window.dialog {
@@ -103,16 +103,60 @@ iframe {
 @supports -moz-bool-pref("layout.css.emulate-moz-box-with-flex") {
   /* In emulation, <iframe> is block instead of inline, so reset the width/height */
   iframe {
     width: auto;
     height: auto;
   }
 }
 
+/* ::::: statusbar ::::: */
+
+statusbar {
+  -moz-appearance: statusbar;
+  border-top: 1px solid ThreeDLightShadow;
+  border-left: 1px solid ThreeDShadow;
+  border-right: 1px solid ThreeDHighlight;
+  border-bottom: 1px solid ThreeDHighlight;
+  background-color: -moz-Dialog;
+  min-height: 22px;
+}
+
+statusbarpanel {
+  -moz-appearance: statusbarpanel;
+  -moz-box-align: center;
+  -moz-box-pack: center;
+  border-left: 1px solid ThreeDHighlight;
+  border-top: 1px solid ThreeDHighlight;
+  border-right: 1px solid ThreeDShadow;
+  border-bottom: 1px solid ThreeDShadow;
+  padding: 0 4px;
+}
+
+statusbarpanel:not(.statusbar-resizerpanel):-moz-lwtheme {
+  -moz-appearance: none;
+  border-top-style: none;
+  border-bottom-style: none;
+  border-inline-start-style: none;
+}
+
+.statusbar-resizerpanel {
+  -moz-box-align: end;
+  -moz-box-pack: end;
+  -moz-appearance: resizerpanel;
+  padding: 0;
+  border: none;
+}
+
+.statusbarpanel-iconic,
+.statusbarpanel-iconic-text,
+.statusbarpanel-menu-iconic {
+  padding: 0 1px;
+}
+
 /* XXXBlake yeah, shoot me -- these don't belong here.  I'll move them later. */
 
 sidebarheader {
   min-height: 25px;
   text-shadow: none;
 }
 
 sidebarheader > label {
@@ -133,16 +177,22 @@ toolbar[mode="text"] .toolbarbutton-text
 :root:-moz-lwtheme-darktext {
   text-shadow: 0 -0.5px 1.5px white;
 }
 
 :root:-moz-lwtheme-brighttext {
   text-shadow: 1px 1px 1.5px black;
 }
 
+statusbar:-moz-lwtheme {
+  -moz-appearance: none;
+  background: none;
+  border-style: none;
+}
+
 .inset {
   border: 1px solid ThreeDShadow;
   border-right-color: ThreeDHighlight;
   border-bottom-color: ThreeDHighlight;
   margin: 0 5px 5px;
 }
 
 .outset {
@@ -235,16 +285,20 @@ label[disabled="true"] {
 .box-padded {
   padding: 5px;
 }
 
 .spaced {
   margin: 3px 5px 4px;
 }
 
+.wizard-box {
+  padding: 20px 44px 10px;
+}
+
 .text-link {
   color: -moz-nativehyperlinktext;
   cursor: pointer;
 }
 
 .text-link:hover {
   text-decoration: underline;
 }
# HG changeset patch
# User RealDolos <dolos@cock.li>
# Date 1517467292 -3600
#      Thu Feb 01 07:41:32 2018 +0100
# Node ID dbe6778113b329ffb93c0c75190b97568c3a7e7f
# Parent  eb5a693a2d1bdc33b6b428b32bd6088fa1f8ff6f
Put pack default pref loading

Backed out changeset 1e5c582b5f3e

diff --git a/modules/libpref/Preferences.cpp b/modules/libpref/Preferences.cpp
--- a/modules/libpref/Preferences.cpp
+++ b/modules/libpref/Preferences.cpp
@@ -3,16 +3,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include <ctype.h>
 #include <stdlib.h>
 #include <string.h>
 
+#include "mozilla/Assertions.h"
 #include "base/basictypes.h"
 #include "GeckoProfiler.h"
 #include "MainThreadUtils.h"
 #include "mozilla/ArenaAllocatorExtensions.h"
 #include "mozilla/ArenaAllocator.h"
 #include "mozilla/ArrayUtils.h"
 #include "mozilla/Attributes.h"
 #include "mozilla/dom/ContentPrefs.h"
@@ -49,16 +50,18 @@
 #include "nsIDirectoryService.h"
 #include "nsIFile.h"
 #include "nsIInputStream.h"
 #include "nsIMemoryReporter.h"
 #include "nsIObserver.h"
 #include "nsIObserverService.h"
 #include "nsIOutputStream.h"
 #include "nsIPrefBranch.h"
+#include "nsIPrefBranch2.h"
+#include "nsIPrefBranchInternal.h"
 #include "nsIPrefLocalizedString.h"
 #include "nsIRelativeFilePref.h"
 #include "nsISafeOutputStream.h"
 #include "nsISimpleEnumerator.h"
 #include "nsIStringBundle.h"
 #include "nsIStringEnumerator.h"
 #include "nsISupportsImpl.h"
 #include "nsISupportsPrimitives.h"
@@ -1238,17 +1241,17 @@ private:
 
   // We need a canonical nsISupports pointer, per bug 578392.
   nsISupports* mCanonical;
 
   bool IsWeak() const { return !!mWeakRef; }
 };
 
 class nsPrefBranch final
-  : public nsIPrefBranch
+  : public nsIPrefBranchInternal
   , public nsIObserver
   , public nsSupportsWeakReference
 {
   friend class mozilla::PreferenceServiceReporter;
 
 public:
   NS_DECL_ISUPPORTS
   NS_DECL_NSIPREFBRANCH
@@ -1400,16 +1403,18 @@ nsPrefBranch::~nsPrefBranch()
     mozilla::services::GetObserverService();
   if (observerService) {
     observerService->RemoveObserver(this, NS_XPCOM_SHUTDOWN_OBSERVER_ID);
   }
 }
 
 NS_IMPL_ISUPPORTS(nsPrefBranch,
                   nsIPrefBranch,
+                  nsIPrefBranch2,
+                  nsIPrefBranchInternal,
                   nsIObserver,
                   nsISupportsWeakReference)
 
 NS_IMETHODIMP
 nsPrefBranch::GetRoot(nsACString& aRoot)
 {
   aRoot = mPrefRoot;
   return NS_OK;
@@ -1720,16 +1725,30 @@ nsPrefBranch::GetComplexValue(const char
     if (NS_FAILED(rv)) {
       return rv;
     }
 
     relativePref.forget(reinterpret_cast<nsIRelativeFilePref**>(aRetVal));
     return NS_OK;
   }
 
+  if (aType.Equals(NS_GET_IID(nsISupportsString))) {
+    nsCOMPtr<nsISupportsString> theString(
+      do_CreateInstance(NS_SUPPORTS_STRING_CONTRACTID, &rv));
+
+    if (NS_SUCCEEDED(rv)) {
+      // Debugging to see why we end up with very long strings here with
+      // some addons, see bug 836263.
+      NS_ConvertUTF8toUTF16 wdata(utf8String);
+      theString->SetData(wdata);
+      theString.forget(reinterpret_cast<nsISupportsString**>(aRetVal));
+    }
+    return rv;
+  }
+
   NS_WARNING("nsPrefBranch::GetComplexValue - Unsupported interface type");
   return NS_NOINTERFACE;
 }
 
 nsresult
 nsPrefBranch::CheckSanityOfStringLength(const char* aPrefName,
                                         const nsAString& aValue)
 {
@@ -1837,17 +1856,18 @@ nsPrefBranch::SetComplexValue(const char
     nsAutoCString descriptorString;
     descriptorString.Append('[');
     descriptorString.Append(relativeToKey);
     descriptorString.Append(']');
     descriptorString.Append(relDescriptor);
     return SetCharPrefNoLengthCheck(aPrefName, descriptorString);
   }
 
-  if (aType.Equals(NS_GET_IID(nsIPrefLocalizedString))) {
+  if (aType.Equals(NS_GET_IID(nsISupportsString)) ||
+      aType.Equals(NS_GET_IID(nsIPrefLocalizedString))) {
     nsCOMPtr<nsISupportsString> theString = do_QueryInterface(aValue);
 
     if (theString) {
       nsString wideString;
 
       rv = theString->GetData(wideString);
       if (NS_SUCCEEDED(rv)) {
         // Check sanity of string length before any lengthy conversion
@@ -2326,16 +2346,19 @@ Preferences::HandleDirty()
         PREF_DELAY_MS);
     }
   }
 }
 
 static nsresult
 openPrefFile(nsIFile* aFile);
 
+static nsresult
+pref_LoadPrefsInDirList(const char* aListId);
+
 static const char kTelemetryPref[] = "toolkit.telemetry.enabled";
 static const char kChannelPref[] = "app.update.channel";
 
 // clang-format off
 static const char kPrefFileHeader[] =
   "// Mozilla User Preferences"
   NS_LINEBREAK
   NS_LINEBREAK
@@ -2854,16 +2877,18 @@ Preferences::GetInstanceForService()
 
     observerService->AddObserver(
       sPreferences, "profile-before-change-telemetry", true);
     rv =
       observerService->AddObserver(sPreferences, "profile-before-change", true);
 
     observerService->AddObserver(
       sPreferences, "suspend_process_notification", true);
+    observerService->AddObserver(
+      sPreferences, "load-extension-defaults", true);
 
     if (NS_FAILED(rv)) {
       sPreferences = nullptr;
       gCacheDataDesc = "AddObserver(\"profile-before-change\") failed";
       return nullptr;
     }
   }
 
@@ -2946,16 +2971,18 @@ Preferences::~Preferences()
 
   gPrefNameArena.Clear();
 }
 
 NS_IMPL_ISUPPORTS(Preferences,
                   nsIPrefService,
                   nsIObserver,
                   nsIPrefBranch,
+                  nsIPrefBranch2,
+                  nsIPrefBranchInternal,
                   nsISupportsWeakReference)
 
 /* static */ void
 Preferences::SetEarlyPreferences(const nsTArray<dom::Pref>* aDomPrefs)
 {
   MOZ_ASSERT(!XRE_IsParentProcess());
 
   gEarlyDomPrefs = new InfallibleTArray<dom::Pref>(mozilla::Move(*aDomPrefs));
@@ -3033,16 +3060,19 @@ Preferences::Observe(nsISupports* aSubje
     SavePrefFileBlocking();
     MOZ_ASSERT(!mDirty, "Preferences should not be dirty");
     mProfileShutdown = true;
 
   } else if (!nsCRT::strcmp(aTopic, "reload-default-prefs")) {
     // Reload the default prefs from file.
     Unused << InitInitialObjects();
 
+  } else if (!strcmp(aTopic, "load-extension-defaults")) {
+    pref_LoadPrefsInDirList(NS_EXT_PREFS_DEFAULTS_DIR_LIST);
+
   } else if (!nsCRT::strcmp(aTopic, "suspend_process_notification")) {
     // Our process is being suspended. The OS may wake our process later,
     // or it may kill the process. In case our process is going to be killed
     // from the suspended state, we save preferences before suspending.
     rv = SavePrefFileBlocking();
   }
 
   return rv;
@@ -3145,16 +3175,51 @@ Preferences::SavePrefFileAsynchronous()
 
 NS_IMETHODIMP
 Preferences::SavePrefFile(nsIFile* aFile)
 {
   // This is the method accessible from service API. Make it off main thread.
   return SavePrefFileInternal(aFile, SaveMethod::Asynchronous);
 }
 
+static nsresult
+pref_ReadPrefFromJar(nsZipArchive* aJarReader, const char* aName);
+
+static nsresult
+ReadExtensionPrefs(nsIFile* aFile)
+{
+  nsresult rv;
+  RefPtr<nsZipArchive> zip = new nsZipArchive();
+  rv = zip->OpenArchive(aFile);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  nsZipFind* findPtr;
+  nsAutoPtr<nsZipFind> find;
+  rv = zip->FindInit("defaults/preferences/*.[Jj][Ss]$", &findPtr);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  const char* entryName;
+  uint16_t entryNameLen;
+  nsTArray<nsCString> prefEntries;
+  find = findPtr;
+  while (NS_SUCCEEDED(find->FindNext(&entryName, &entryNameLen))) {
+    prefEntries.AppendElement(Substring(entryName, entryNameLen));
+  }
+  prefEntries.Sort();
+  for (uint32_t i = prefEntries.Length(); i--;) {
+    rv = pref_ReadPrefFromJar(zip, prefEntries[i].get());
+    if (NS_FAILED(rv)) {
+      NS_WARNING("Error parsing preferences.");
+    }
+  }
+
+  return rv;
+}
+
+
 /* static */ void
 Preferences::SetPreference(const dom::Pref& aDomPref)
 {
   MOZ_ASSERT(!XRE_IsParentProcess());
   NS_ENSURE_TRUE(InitStaticMembers(), (void)0);
 
   const char* prefName = aDomPref.name().get();
 
@@ -3603,16 +3668,59 @@ pref_LoadPrefsInDir(nsIFile* aDir,
       }
     }
   }
 
   return rv;
 }
 
 static nsresult
+pref_LoadPrefsInDirList(const char* aListId)
+{
+  nsresult rv;
+  nsCOMPtr<nsIProperties> dirSvc(
+    do_GetService(NS_DIRECTORY_SERVICE_CONTRACTID, &rv));
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
+
+  nsCOMPtr<nsISimpleEnumerator> list;
+  dirSvc->Get(aListId, NS_GET_IID(nsISimpleEnumerator), getter_AddRefs(list));
+  if (!list) {
+    return NS_OK;
+  }
+
+  bool hasMore;
+  while (NS_SUCCEEDED(list->HasMoreElements(&hasMore)) && hasMore) {
+    nsCOMPtr<nsISupports> elem;
+    list->GetNext(getter_AddRefs(elem));
+    if (!elem) {
+      continue;
+    }
+
+    nsCOMPtr<nsIFile> path = do_QueryInterface(elem);
+    if (!path) {
+      continue;
+    }
+
+    // Do we care if a file provided by this process fails to load?
+    nsAutoCString leaf;
+    path->GetNativeLeafName(leaf);
+    if (Substring(leaf, leaf.Length() - 4).EqualsLiteral(".xpi")) {
+      ReadExtensionPrefs(path);
+    }
+    else {
+      pref_LoadPrefsInDir(path, nullptr, 0);
+    }
+  }
+
+  return NS_OK;
+}
+
+static nsresult
 pref_ReadPrefFromJar(nsZipArchive* aJarReader, const char* aName)
 {
   TimeStamp startTime = TimeStamp::Now();
 
   nsCString manifest;
   MOZ_TRY_VAR(manifest,
               URLPreloader::ReadZip(aJarReader, nsDependentCString(aName)));
 
@@ -3758,43 +3866,19 @@ Preferences::InitInitialObjects()
     for (uint32_t i = prefEntries.Length(); i--;) {
       rv = pref_ReadPrefFromJar(appJarReader, prefEntries[i].get());
       if (NS_FAILED(rv)) {
         NS_WARNING("Error parsing preferences.");
       }
     }
   }
 
-  nsCOMPtr<nsIProperties> dirSvc(
-    do_GetService(NS_DIRECTORY_SERVICE_CONTRACTID, &rv));
+  rv = pref_LoadPrefsInDirList(NS_APP_PREFS_DEFAULTS_DIR_LIST);
   NS_ENSURE_SUCCESS(
-    rv, Err("do_GetService(NS_DIRECTORY_SERVICE_CONTRACTID) failed"));
-
-  nsCOMPtr<nsISimpleEnumerator> list;
-  dirSvc->Get(NS_APP_PREFS_DEFAULTS_DIR_LIST,
-              NS_GET_IID(nsISimpleEnumerator),
-              getter_AddRefs(list));
-  if (list) {
-    bool hasMore;
-    while (NS_SUCCEEDED(list->HasMoreElements(&hasMore)) && hasMore) {
-      nsCOMPtr<nsISupports> elem;
-      list->GetNext(getter_AddRefs(elem));
-      if (!elem) {
-        continue;
-      }
-
-      nsCOMPtr<nsIFile> path = do_QueryInterface(elem);
-      if (!path) {
-        continue;
-      }
-
-      // Do we care if a file provided by this process fails to load?
-      pref_LoadPrefsInDir(path, nullptr, 0);
-    }
-  }
+    rv, Err("pref_LoadPrefsInDirList(NS_APP_PREFS_DEFAULTS_DIR_LIST) failed"));
 
 #ifdef MOZ_WIDGET_ANDROID
   // Set up the correct default for toolkit.telemetry.enabled. If this build
   // has MOZ_TELEMETRY_ON_BY_DEFAULT *or* we're on the beta channel, telemetry
   // is on by default, otherwise not. This is necessary so that beta users who
   // are testing final release builds don't flipflop defaults.
   if (Preferences::GetType(kTelemetryPref) == nsIPrefBranch::PREF_INVALID) {
     bool prerelease = false;
@@ -3839,16 +3923,20 @@ Preferences::InitInitialObjects()
 
   nsCOMPtr<nsIObserverService> observerService =
     mozilla::services::GetObserverService();
   NS_ENSURE_SUCCESS(rv, Err("GetObserverService() failed (2)"));
 
   observerService->NotifyObservers(
     nullptr, NS_PREFSERVICE_APPDEFAULTS_TOPIC_ID, nullptr);
 
+  rv = pref_LoadPrefsInDirList(NS_EXT_PREFS_DEFAULTS_DIR_LIST);
+  NS_ENSURE_SUCCESS(
+    rv, Err("pref_LoadPrefsInDirList(NS_EXT_PREFS_DEFAULTS_DIR_LIST) failed"));
+
   return Ok();
 }
 
 /* static */ nsresult
 Preferences::GetBool(const char* aPrefName, bool* aResult, PrefValueKind aKind)
 {
   NS_PRECONDITION(aResult, "aResult must not be NULL");
   NS_ENSURE_TRUE(InitStaticMembers(), NS_ERROR_NOT_AVAILABLE);
diff --git a/modules/libpref/Preferences.h b/modules/libpref/Preferences.h
--- a/modules/libpref/Preferences.h
+++ b/modules/libpref/Preferences.h
@@ -13,16 +13,18 @@
 
 #include "mozilla/Atomics.h"
 #include "mozilla/MemoryReporting.h"
 #include "mozilla/Result.h"
 #include "mozilla/StaticPtr.h"
 #include "nsCOMPtr.h"
 #include "nsIObserver.h"
 #include "nsIPrefBranch.h"
+#include "nsIPrefBranch2.h"
+#include "nsIPrefBranchInternal.h"
 #include "nsIPrefService.h"
 #include "nsPrintfCString.h"
 #include "nsString.h"
 #include "nsTArray.h"
 #include "nsWeakReference.h"
 
 class nsIFile;
 
@@ -46,17 +48,17 @@ enum class PrefValueKind : uint8_t
 {
   Default,
   User
 };
 
 class Preferences final
   : public nsIPrefService
   , public nsIObserver
-  , public nsIPrefBranch
+  , public nsIPrefBranchInternal
   , public nsSupportsWeakReference
 {
   friend class ::nsPrefBranch;
 
 public:
   NS_DECL_THREADSAFE_ISUPPORTS
   NS_DECL_NSIPREFSERVICE
   NS_FORWARD_NSIPREFBRANCH(mRootBranch->)
diff --git a/modules/libpref/init/all.js b/modules/libpref/init/all.js
--- a/modules/libpref/init/all.js
+++ b/modules/libpref/init/all.js
@@ -5924,16 +5924,20 @@ pref("layers.advanced.columnRule-layers"
 pref("layers.advanced.image-layers", 2);
 pref("layers.advanced.outline-layers", 2);
 pref("layers.advanced.solid-color", false);
 pref("layers.advanced.table", false);
 
 // Enable lowercased response header name
 pref("dom.xhr.lowercase_header.enabled", false);
 
+// Compat
+pref("intl.locale.matchOS", false);
+pref("general.useragent.locale", "en-US");
+
 // Control whether clients.openWindow() opens windows in the same process
 // that called the API vs following our normal multi-process selection
 // algorithm.  Restricting openWindow to same process improves service worker
 // web compat in the short term.  Once the SW multi-e10s refactor is complete
 // this can be removed.
 pref("dom.clients.openwindow_favors_same_process", true);
 
 // When a crash happens, whether to include heap regions of the crash context
diff --git a/modules/libpref/moz.build b/modules/libpref/moz.build
--- a/modules/libpref/moz.build
+++ b/modules/libpref/moz.build
@@ -12,16 +12,18 @@ if CONFIG['ENABLE_TESTS']:
 
 XPCSHELL_TESTS_MANIFESTS += [
     'test/unit/xpcshell.ini',
     'test/unit_ipc/xpcshell.ini',
 ]
 
 XPIDL_SOURCES += [
     'nsIPrefBranch.idl',
+    'nsIPrefBranch2.idl',
+    'nsIPrefBranchInternal.idl',
     'nsIPrefLocalizedString.idl',
     'nsIPrefService.idl',
     'nsIRelativeFilePref.idl',
 ]
 
 XPIDL_MODULE = 'pref'
 
 EXPORTS.mozilla += [
diff --git a/modules/libpref/nsIPrefBranch2.idl b/modules/libpref/nsIPrefBranch2.idl
new file mode 100644
--- /dev/null
+++ b/modules/libpref/nsIPrefBranch2.idl
@@ -0,0 +1,16 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "nsIPrefBranch.idl"
+
+/**
+ * An empty interface to provide backwards compatibility for existing code.
+ *
+ * @see nsIPrefBranch
+ */
+[scriptable, uuid(8892016d-07f7-4530-b5c1-d73dfcde4a1c)]
+interface nsIPrefBranch2 : nsIPrefBranch
+{
+};
diff --git a/modules/libpref/nsIPrefBranchInternal.idl b/modules/libpref/nsIPrefBranchInternal.idl
new file mode 100644
--- /dev/null
+++ b/modules/libpref/nsIPrefBranchInternal.idl
@@ -0,0 +1,17 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "nsIPrefBranch2.idl"
+
+/**
+ * An empty interface to provide backwards compatibility for existing code that
+ * bsmedberg didn't want to break all at once. Don't use me!
+ *
+ * @status NON-FROZEN interface WHICH WILL PROBABLY GO AWAY.
+ */
+
+[scriptable, uuid(355bd1e9-248a-438b-809d-e0db1b287882)]
+interface nsIPrefBranchInternal : nsIPrefBranch2
+{
+};
diff --git a/toolkit/content/widgets/preferences.xml b/toolkit/content/widgets/preferences.xml
new file mode 100644
--- /dev/null
+++ b/toolkit/content/widgets/preferences.xml
@@ -0,0 +1,1409 @@
+<?xml version="1.0"?>
+
+<!DOCTYPE bindings [
+  <!ENTITY % preferencesDTD SYSTEM "chrome://global/locale/preferences.dtd">
+  %preferencesDTD;
+  <!ENTITY % globalKeysDTD SYSTEM "chrome://global/locale/globalKeys.dtd">
+  %globalKeysDTD;
+]>
+
+<bindings id="preferencesBindings"
+          xmlns="http://www.mozilla.org/xbl"
+          xmlns:xbl="http://www.mozilla.org/xbl"
+          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
+
+#
+# = Preferences Window Framework
+#
+#   The syntax for use looks something like:
+#
+#   <prefwindow>
+#     <prefpane id="prefPaneA">
+#       <preferences>
+#         <preference id="preference1" name="app.preference1" type="bool" onchange="foo();"/>
+#         <preference id="preference2" name="app.preference2" type="bool" useDefault="true"/>
+#       </preferences>
+#       <checkbox label="Preference" preference="preference1"/>
+#     </prefpane>
+#   </prefwindow>
+#
+
+  <binding id="preferences">
+    <implementation implements="nsIObserver">
+      <method name="_constructAfterChildren">
+      <body>
+      <![CDATA[
+      // This method will be called after the last of the child
+      // <preference> elements is constructed. Its purpose is to propagate
+      // the values to the associated form elements. Sometimes the code for
+      // some <preference> initializers depend on other <preference> elements
+      // being initialized so we wait and call updateElements on all of them
+      // once the last one has been constructed. See bugs 997570 and 992185.
+
+      var elements = this.getElementsByTagName("preference");
+      for (let element of elements) {
+        element.updateElements();
+      }
+
+      this._constructAfterChildrenCalled = true;
+      ]]>
+      </body>
+      </method>
+      <method name="observe">
+        <parameter name="aSubject"/>
+        <parameter name="aTopic"/>
+        <parameter name="aData"/>
+        <body>
+        <![CDATA[
+          for (var i = 0; i < this.childNodes.length; ++i) {
+            var preference = this.childNodes[i];
+            if (preference.name == aData) {
+              preference.value = preference.valueFromPreferences;
+            }
+          }
+        ]]>
+        </body>
+      </method>
+
+      <method name="fireChangedEvent">
+        <parameter name="aPreference"/>
+        <body>
+        <![CDATA[
+          // Value changed, synthesize an event
+          try {
+            var event = document.createEvent("Events");
+            event.initEvent("change", true, true);
+            aPreference.dispatchEvent(event);
+          } catch (e) {
+            Components.utils.reportError(e);
+          }
+        ]]>
+        </body>
+      </method>
+
+      <field name="service">
+        Components.classes["@mozilla.org/preferences-service;1"]
+                  .getService(Components.interfaces.nsIPrefService);
+      </field>
+      <field name="rootBranch">
+        Components.classes["@mozilla.org/preferences-service;1"]
+                  .getService(Components.interfaces.nsIPrefBranch);
+      </field>
+      <field name="defaultBranch">
+        this.service.getDefaultBranch("");
+      </field>
+      <field name="rootBranchInternal">
+        Components.classes["@mozilla.org/preferences-service;1"]
+                  .getService(Components.interfaces.nsIPrefBranch);
+      </field>
+      <property name="type" readonly="true">
+        <getter>
+          <![CDATA[
+            return document.documentElement.type || "";
+          ]]>
+        </getter>
+      </property>
+      <property name="instantApply" readonly="true">
+        <getter>
+          <![CDATA[
+            var doc = document.documentElement;
+            return this.type == "child" ? doc.instantApply
+                                        : doc.instantApply || this.rootBranch.getBoolPref("browser.preferences.instantApply");
+          ]]>
+        </getter>
+      </property>
+
+      <!-- We want to call _constructAfterChildren after all child
+           <preference> elements have been constructed. To do this, we get
+           and store the node list of all child <preference> elements in the
+           constructor, and maintain a count which is incremented in the
+           constructor of <preference>. _constructAfterChildren is called
+           when the count matches the length of the list. -->
+      <field name="_constructedChildrenCount">0</field>
+      <field name="_preferenceChildren">null</field>
+      <!-- Some <preference> elements are added dynamically after
+           _constructAfterChildren has already been called - we want to
+           avoid looping over all of them again in this case so we remember
+           if we already called it. -->
+      <field name="_constructAfterChildrenCalled">false</field>
+      <constructor>
+      <![CDATA[
+        this._preferenceChildren = this.getElementsByTagName("preference");
+      ]]>
+      </constructor>
+    </implementation>
+  </binding>
+
+  <binding id="preference">
+    <implementation>
+      <constructor>
+      <![CDATA[
+        // if the element has been inserted without the name attribute set,
+        // we have nothing to do here
+        if (!this.name)
+          return;
+
+        this.preferences.rootBranchInternal
+            .addObserver(this.name, this.preferences);
+        // In non-instant apply mode, we must try and use the last saved state
+        // from any previous opens of a child dialog instead of the value from
+        // preferences, to pick up any edits a user may have made.
+
+        var secMan = Components.classes["@mozilla.org/scriptsecuritymanager;1"]
+                    .getService(Components.interfaces.nsIScriptSecurityManager);
+        if (this.preferences.type == "child" &&
+            !this.instantApply && window.opener &&
+            secMan.isSystemPrincipal(window.opener.document.nodePrincipal)) {
+          var pdoc = window.opener.document;
+
+          // Try to find a preference element for the same preference.
+          var preference = null;
+          var parentPreferences = pdoc.getElementsByTagName("preferences");
+          for (var k = 0; (k < parentPreferences.length && !preference); ++k) {
+            var parentPrefs = parentPreferences[k]
+                                    .getElementsByAttribute("name", this.name);
+            for (var l = 0; (l < parentPrefs.length && !preference); ++l) {
+              if (parentPrefs[l].localName == "preference")
+                preference = parentPrefs[l];
+            }
+          }
+
+          // Don't use the value setter here, we don't want updateElements to be prematurely fired.
+          this._value = preference ? preference.value : this.valueFromPreferences;
+        } else {
+          this._value = this.valueFromPreferences;
+        }
+        if (this.preferences._constructAfterChildrenCalled) {
+          // This <preference> was added after _constructAfterChildren() was already called.
+          // We can directly call updateElements().
+          this.updateElements();
+          return;
+        }
+        this.preferences._constructedChildrenCount++;
+        if (this.preferences._constructedChildrenCount ==
+            this.preferences._preferenceChildren.length) {
+          // This is the last <preference>, time to updateElements() on all of them.
+          this.preferences._constructAfterChildren();
+        }
+      ]]>
+      </constructor>
+      <destructor>
+        this.preferences.rootBranchInternal
+            .removeObserver(this.name, this.preferences);
+      </destructor>
+      <field name="_constructed">false</field>
+      <property name="instantApply">
+        <getter>
+          if (this.getAttribute("instantApply") == "false")
+            return false;
+          return this.getAttribute("instantApply") == "true" || this.preferences.instantApply;
+        </getter>
+      </property>
+
+      <property name="preferences" onget="return this.parentNode"/>
+      <property name="name" onget="return this.getAttribute('name');">
+        <setter>
+          if (val == this.name)
+            return val;
+
+          this.preferences.rootBranchInternal
+              .removeObserver(this.name, this.preferences);
+          this.setAttribute("name", val);
+          this.preferences.rootBranchInternal
+              .addObserver(val, this.preferences);
+
+          return val;
+        </setter>
+      </property>
+      <property name="type" onget="return this.getAttribute('type');"
+                            onset="this.setAttribute('type', val); return val;"/>
+      <property name="inverted" onget="return this.getAttribute('inverted') == 'true';"
+                                onset="this.setAttribute('inverted', val); return val;"/>
+      <property name="readonly" onget="return this.getAttribute('readonly') == 'true';"
+                                onset="this.setAttribute('readonly', val); return val;"/>
+
+      <field name="_value">null</field>
+      <method name="_setValue">
+        <parameter name="aValue"/>
+        <body>
+        <![CDATA[
+          if (this.value !== aValue) {
+            this._value = aValue;
+            if (this.instantApply)
+              this.valueFromPreferences = aValue;
+            this.preferences.fireChangedEvent(this);
+          }
+          return aValue;
+        ]]>
+        </body>
+      </method>
+      <property name="value" onget="return this._value" onset="return this._setValue(val);"/>
+
+      <property name="locked">
+        <getter>
+          return this.preferences.rootBranch.prefIsLocked(this.name);
+        </getter>
+      </property>
+
+      <property name="disabled">
+        <getter>
+          return this.getAttribute("disabled") == "true";
+        </getter>
+        <setter>
+        <![CDATA[
+          if (val)
+            this.setAttribute("disabled", "true");
+          else
+            this.removeAttribute("disabled");
+
+          if (!this.id)
+            return val;
+
+          var elements = document.getElementsByAttribute("preference", this.id);
+          for (var i = 0; i < elements.length; ++i) {
+            elements[i].disabled = val;
+
+            var labels = document.getElementsByAttribute("control", elements[i].id);
+            for (var j = 0; j < labels.length; ++j)
+              labels[j].disabled = val;
+          }
+
+          return val;
+        ]]>
+        </setter>
+      </property>
+
+      <property name="tabIndex">
+        <getter>
+          return parseInt(this.getAttribute("tabindex"));
+        </getter>
+        <setter>
+        <![CDATA[
+          if (val)
+            this.setAttribute("tabindex", val);
+          else
+            this.removeAttribute("tabindex");
+
+          if (!this.id)
+            return val;
+
+          var elements = document.getElementsByAttribute("preference", this.id);
+          for (var i = 0; i < elements.length; ++i) {
+            elements[i].tabIndex = val;
+
+            var labels = document.getElementsByAttribute("control", elements[i].id);
+            for (var j = 0; j < labels.length; ++j)
+              labels[j].tabIndex = val;
+          }
+
+          return val;
+        ]]>
+        </setter>
+      </property>
+
+      <property name="hasUserValue">
+        <getter>
+        <![CDATA[
+          return this.preferences.rootBranch.prefHasUserValue(this.name) &&
+                 this.value !== undefined;
+        ]]>
+        </getter>
+      </property>
+
+      <method name="reset">
+        <body>
+          // defer reset until preference update
+          this.value = undefined;
+        </body>
+      </method>
+
+      <field name="_useDefault">false</field>
+      <property name="defaultValue">
+        <getter>
+        <![CDATA[
+          this._useDefault = true;
+          var val = this.valueFromPreferences;
+          this._useDefault = false;
+          return val;
+        ]]>
+        </getter>
+      </property>
+
+      <property name="_branch">
+        <getter>
+          return this._useDefault ? this.preferences.defaultBranch : this.preferences.rootBranch;
+        </getter>
+      </property>
+
+      <field name="batching">false</field>
+
+      <method name="_reportUnknownType">
+        <body>
+        <![CDATA[
+          var consoleService = Components.classes["@mozilla.org/consoleservice;1"]
+                                         .getService(Components.interfaces.nsIConsoleService);
+          var msg = "<preference> with id='" + this.id + "' and name='" +
+                    this.name + "' has unknown type '" + this.type + "'.";
+          consoleService.logStringMessage(msg);
+        ]]>
+        </body>
+      </method>
+
+      <property name="valueFromPreferences">
+        <getter>
+        <![CDATA[
+          try {
+            // Force a resync of value with preferences.
+            switch (this.type) {
+            case "int":
+              return this._branch.getIntPref(this.name);
+            case "bool":
+              var val = this._branch.getBoolPref(this.name);
+              return this.inverted ? !val : val;
+            case "wstring":
+              return this._branch
+                         .getComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString)
+                         .data;
+            case "string":
+            case "unichar":
+              return this._branch.getStringPref(this.name);
+            case "fontname":
+              var family = this._branch.getStringPref(this.name);
+              var fontEnumerator = Components.classes["@mozilla.org/gfx/fontenumerator;1"]
+                                             .createInstance(Components.interfaces.nsIFontEnumerator);
+              return fontEnumerator.getStandardFamilyName(family);
+            case "file":
+              var f = this._branch
+                          .getComplexValue(this.name, Components.interfaces.nsIFile);
+              return f;
+            default:
+              this._reportUnknownType();
+            }
+          } catch (e) { }
+          return null;
+        ]]>
+        </getter>
+        <setter>
+        <![CDATA[
+          // Exit early if nothing to do.
+          if (this.readonly || this.valueFromPreferences == val)
+            return val;
+
+          // The special value undefined means 'reset preference to default'.
+          if (val === undefined) {
+            this.preferences.rootBranch.clearUserPref(this.name);
+            return val;
+          }
+
+          // Force a resync of preferences with value.
+          switch (this.type) {
+          case "int":
+            this.preferences.rootBranch.setIntPref(this.name, val);
+            break;
+          case "bool":
+            this.preferences.rootBranch.setBoolPref(this.name, this.inverted ? !val : val);
+            break;
+          case "wstring":
+            var pls = Components.classes["@mozilla.org/pref-localizedstring;1"]
+                                .createInstance(Components.interfaces.nsIPrefLocalizedString);
+            pls.data = val;
+            this.preferences.rootBranch
+                .setComplexValue(this.name, Components.interfaces.nsIPrefLocalizedString, pls);
+            break;
+          case "string":
+          case "unichar":
+          case "fontname":
+            this.preferences.rootBranch.setStringPref(this.name, val);
+            break;
+          case "file":
+            var lf;
+            if (typeof(val) == "string") {
+              lf = Components.classes["@mozilla.org/file/local;1"]
+                             .createInstance(Components.interfaces.nsIFile);
+              lf.persistentDescriptor = val;
+              if (!lf.exists())
+                lf.initWithPath(val);
+            } else
+              lf = val.QueryInterface(Components.interfaces.nsIFile);
+            this.preferences.rootBranch
+                .setComplexValue(this.name, Components.interfaces.nsIFile, lf);
+            break;
+          default:
+            this._reportUnknownType();
+          }
+          if (!this.batching)
+            this.preferences.service.savePrefFile(null);
+          return val;
+        ]]>
+        </setter>
+      </property>
+
+      <method name="setElementValue">
+        <parameter name="aElement"/>
+        <body>
+        <![CDATA[
+          if (this.locked)
+            aElement.disabled = true;
+
+          if (!this.isElementEditable(aElement))
+            return;
+
+          var rv = undefined;
+          if (aElement.hasAttribute("onsyncfrompreference")) {
+            // Value changed, synthesize an event
+            try {
+              var event = document.createEvent("Events");
+              event.initEvent("syncfrompreference", true, true);
+              var f = new Function("event",
+                                   aElement.getAttribute("onsyncfrompreference"));
+              rv = f.call(aElement, event);
+            } catch (e) {
+              Components.utils.reportError(e);
+            }
+          }
+          var val = rv;
+          if (val === undefined)
+            val = this.instantApply ? this.valueFromPreferences : this.value;
+          // if the preference is marked for reset, show default value in UI
+          if (val === undefined)
+            val = this.defaultValue;
+
+          /**
+           * Initialize a UI element property with a value. Handles the case
+           * where an element has not yet had a XBL binding attached for it and
+           * the property setter does not yet exist by setting the same attribute
+           * on the XUL element using DOM apis and assuming the element's
+           * constructor or property getters appropriately handle this state.
+           */
+          function setValue(element, attribute, value) {
+            if (attribute in element)
+              element[attribute] = value;
+            else
+              element.setAttribute(attribute, value);
+          }
+          if (aElement.localName == "checkbox" ||
+              aElement.localName == "listitem")
+            setValue(aElement, "checked", val);
+          else if (aElement.localName == "colorpicker")
+            setValue(aElement, "color", val);
+          else if (aElement.localName == "textbox") {
+            // XXXmano Bug 303998: Avoid a caret placement issue if either the
+            // preference observer or its setter calls updateElements as a result
+            // of the input event handler.
+            if (aElement.value !== val)
+              setValue(aElement, "value", val);
+          } else
+            setValue(aElement, "value", val);
+        ]]>
+        </body>
+      </method>
+
+      <method name="getElementValue">
+        <parameter name="aElement"/>
+        <body>
+        <![CDATA[
+          if (aElement.hasAttribute("onsynctopreference")) {
+            // Value changed, synthesize an event
+            try {
+              var event = document.createEvent("Events");
+              event.initEvent("synctopreference", true, true);
+              var f = new Function("event",
+                                   aElement.getAttribute("onsynctopreference"));
+              var rv = f.call(aElement, event);
+              if (rv !== undefined)
+                return rv;
+            } catch (e) {
+              Components.utils.reportError(e);
+            }
+          }
+
+          /**
+           * Read the value of an attribute from an element, assuming the
+           * attribute is a property on the element's node API. If the property
+           * is not present in the API, then assume its value is contained in
+           * an attribute, as is the case before a binding has been attached.
+           */
+          function getValue(element, attribute) {
+            if (attribute in element)
+              return element[attribute];
+            return element.getAttribute(attribute);
+          }
+          if (aElement.localName == "checkbox" ||
+              aElement.localName == "listitem")
+            var value = getValue(aElement, "checked");
+          else if (aElement.localName == "colorpicker")
+            value = getValue(aElement, "color");
+          else
+            value = getValue(aElement, "value");
+
+          switch (this.type) {
+          case "int":
+            return parseInt(value, 10) || 0;
+          case "bool":
+            return typeof(value) == "boolean" ? value : value == "true";
+          }
+          return value;
+        ]]>
+        </body>
+      </method>
+
+      <method name="isElementEditable">
+        <parameter name="aElement"/>
+        <body>
+        <![CDATA[
+          switch (aElement.localName) {
+          case "checkbox":
+          case "colorpicker":
+          case "radiogroup":
+          case "textbox":
+          case "listitem":
+          case "listbox":
+          case "menulist":
+            return true;
+          }
+          return aElement.getAttribute("preference-editable") == "true";
+        ]]>
+        </body>
+      </method>
+
+      <method name="updateElements">
+        <body>
+        <![CDATA[
+          if (!this.id)
+            return;
+
+          // This "change" event handler tracks changes made to preferences by
+          // sources other than the user in this window.
+          var elements = document.getElementsByAttribute("preference", this.id);
+          for (var i = 0; i < elements.length; ++i)
+            this.setElementValue(elements[i]);
+        ]]>
+        </body>
+      </method>
+    </implementation>
+
+    <handlers>
+      <handler event="change">
+        this.updateElements();
+      </handler>
+    </handlers>
+  </binding>
+
+  <binding id="prefwindow"
+           extends="chrome://global/content/bindings/dialog.xml#dialog">
+    <resources>
+      <stylesheet src="chrome://global/skin/preferences.css"/>
+    </resources>
+    <content dlgbuttons="accept,cancel" persist="lastSelected screenX screenY"
+             closebuttonlabel="&preferencesCloseButton.label;"
+             closebuttonaccesskey="&preferencesCloseButton.accesskey;"
+             role="dialog"
+#ifdef XP_WIN
+             title="&preferencesDefaultTitleWin.title;">
+#else
+             title="&preferencesDefaultTitleMac.title;">
+#endif
+      <xul:windowdragbox orient="vertical">
+        <xul:radiogroup anonid="selector" orient="horizontal" class="paneSelector chromeclass-toolbar"
+                        role="listbox"/> <!-- Expose to accessibility APIs as a listbox -->
+      </xul:windowdragbox>
+      <xul:hbox flex="1" class="paneDeckContainer">
+        <xul:deck anonid="paneDeck" flex="1">
+          <children includes="prefpane"/>
+        </xul:deck>
+      </xul:hbox>
+      <xul:hbox anonid="dlg-buttons" class="prefWindow-dlgbuttons" pack="end">
+#ifdef XP_UNIX
+        <xul:button dlgtype="disclosure" class="dialog-button" hidden="true"/>
+        <xul:button dlgtype="help" class="dialog-button" hidden="true" icon="help"/>
+        <xul:button dlgtype="extra2" class="dialog-button" hidden="true"/>
+        <xul:button dlgtype="extra1" class="dialog-button" hidden="true"/>
+        <xul:spacer anonid="spacer" flex="1"/>
+        <xul:button dlgtype="cancel" class="dialog-button" icon="cancel"/>
+        <xul:button dlgtype="accept" class="dialog-button" icon="accept"/>
+#else
+        <xul:button dlgtype="extra2" class="dialog-button" hidden="true"/>
+        <xul:spacer anonid="spacer" flex="1"/>
+        <xul:button dlgtype="accept" class="dialog-button" icon="accept"/>
+        <xul:button dlgtype="extra1" class="dialog-button" hidden="true"/>
+        <xul:button dlgtype="cancel" class="dialog-button" icon="cancel"/>
+        <xul:button dlgtype="help" class="dialog-button" hidden="true" icon="help"/>
+        <xul:button dlgtype="disclosure" class="dialog-button" hidden="true"/>
+#endif
+      </xul:hbox>
+      <xul:hbox>
+        <children/>
+      </xul:hbox>
+    </content>
+    <implementation implements="nsITimerCallback">
+      <constructor>
+      <![CDATA[
+        if (this.type != "child") {
+          if (!this._instantApplyInitialized) {
+            let psvc = Components.classes["@mozilla.org/preferences-service;1"]
+                                 .getService(Components.interfaces.nsIPrefBranch);
+            this.instantApply = psvc.getBoolPref("browser.preferences.instantApply");
+          }
+          if (this.instantApply) {
+            var docElt = document.documentElement;
+            var acceptButton = docElt.getButton("accept");
+            acceptButton.hidden = true;
+            var cancelButton  = docElt.getButton("cancel");
+            if (/Mac/.test(navigator.platform)) {
+              // no buttons on Mac except Help
+              cancelButton.hidden = true;
+              // Move Help button to the end
+              document.getAnonymousElementByAttribute(this, "anonid", "spacer").hidden = true;
+              // Also, don't fire onDialogAccept on enter
+              acceptButton.disabled = true;
+            } else {
+              // morph the Cancel button into the Close button
+              cancelButton.setAttribute("icon", "close");
+              cancelButton.label = docElt.getAttribute("closebuttonlabel");
+              cancelButton.accesskey = docElt.getAttribute("closebuttonaccesskey");
+            }
+          }
+        }
+        this.setAttribute("animated", this._shouldAnimate ? "true" : "false");
+        var panes = this.preferencePanes;
+
+        var lastPane = null;
+        if (this.lastSelected) {
+          lastPane = document.getElementById(this.lastSelected);
+          if (!lastPane) {
+            this.lastSelected = "";
+          }
+        }
+
+        var paneToLoad;
+        if ("arguments" in window && window.arguments[0] && document.getElementById(window.arguments[0]) && document.getElementById(window.arguments[0]).nodeName == "prefpane") {
+          paneToLoad = document.getElementById(window.arguments[0]);
+          this.lastSelected = paneToLoad.id;
+        } else if (lastPane)
+          paneToLoad = lastPane;
+        else
+          paneToLoad = panes[0];
+
+        for (var i = 0; i < panes.length; ++i) {
+          this._makePaneButton(panes[i]);
+          if (panes[i].loaded) {
+            // Inline pane content, fire load event to force initialization.
+            this._fireEvent("paneload", panes[i]);
+          }
+        }
+        this.showPane(paneToLoad);
+
+        if (panes.length == 1)
+          this._selector.setAttribute("collapsed", "true");
+      ]]>
+      </constructor>
+
+      <destructor>
+      <![CDATA[
+        // Release timers to avoid reference cycles.
+        if (this._animateTimer) {
+          this._animateTimer.cancel();
+          this._animateTimer = null;
+        }
+        if (this._fadeTimer) {
+          this._fadeTimer.cancel();
+          this._fadeTimer = null;
+        }
+      ]]>
+      </destructor>
+
+      <!-- Derived bindings can set this to true to cause us to skip
+           reading the browser.preferences.instantApply pref in the constructor.
+           Then they can set instantApply to their wished value. -->
+      <field name="_instantApplyInitialized">false</field>
+      <!-- Controls whether changed pref values take effect immediately. -->
+      <field name="instantApply">false</field>
+
+      <property name="preferencePanes"
+                onget="return this.getElementsByTagName('prefpane');"/>
+
+      <property name="type" onget="return this.getAttribute('type');"/>
+      <property name="_paneDeck"
+                onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'paneDeck');"/>
+      <property name="_paneDeckContainer"
+                onget="return document.getAnonymousElementByAttribute(this, 'class', 'paneDeckContainer');"/>
+      <property name="_selector"
+                onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'selector');"/>
+      <property name="lastSelected"
+                onget="return this.getAttribute('lastSelected');">
+        <setter>
+          this.setAttribute("lastSelected", val);
+          document.persist(this.id, "lastSelected");
+          return val;
+        </setter>
+      </property>
+      <property name="currentPane"
+                onset="return this._currentPane = val;">
+        <getter>
+          if (!this._currentPane)
+            this._currentPane = this.preferencePanes[0];
+
+          return this._currentPane;
+        </getter>
+      </property>
+      <field name="_currentPane">null</field>
+
+
+      <method name="_makePaneButton">
+        <parameter name="aPaneElement"/>
+        <body>
+        <![CDATA[
+          var radio = document.createElement("radio");
+          radio.setAttribute("pane", aPaneElement.id);
+          radio.setAttribute("label", aPaneElement.label);
+          // Expose preference group choice to accessibility APIs as an unchecked list item
+          // The parent group is exposed to accessibility APIs as a list
+          if (aPaneElement.image)
+            radio.setAttribute("src", aPaneElement.image);
+          radio.style.listStyleImage = aPaneElement.style.listStyleImage;
+          this._selector.appendChild(radio);
+          return radio;
+        ]]>
+        </body>
+      </method>
+
+      <method name="showPane">
+        <parameter name="aPaneElement"/>
+        <body>
+        <![CDATA[
+          if (!aPaneElement)
+            return;
+
+          this._selector.selectedItem = document.getAnonymousElementByAttribute(this, "pane", aPaneElement.id);
+          if (!aPaneElement.loaded) {
+            let OverlayLoadObserver = function(aPane) {
+              this._pane = aPane;
+            };
+            OverlayLoadObserver.prototype = {
+              _outer: this,
+              observe(aSubject, aTopic, aData) {
+                this._pane.loaded = true;
+                this._outer._fireEvent("paneload", this._pane);
+                this._outer._selectPane(this._pane);
+              }
+            };
+
+            var obs = new OverlayLoadObserver(aPaneElement);
+            document.loadOverlay(aPaneElement.src, obs);
+          } else
+            this._selectPane(aPaneElement);
+        ]]>
+        </body>
+      </method>
+
+      <method name="_fireEvent">
+        <parameter name="aEventName"/>
+        <parameter name="aTarget"/>
+        <body>
+        <![CDATA[
+          // Panel loaded, synthesize a load event.
+          try {
+            var event = document.createEvent("Events");
+            event.initEvent(aEventName, true, true);
+            var cancel = !aTarget.dispatchEvent(event);
+            if (aTarget.hasAttribute("on" + aEventName)) {
+              var fn = new Function("event", aTarget.getAttribute("on" + aEventName));
+              var rv = fn.call(aTarget, event);
+              if (rv == false)
+                cancel = true;
+            }
+            return !cancel;
+          } catch (e) {
+            Components.utils.reportError(e);
+          }
+          return false;
+        ]]>
+        </body>
+      </method>
+
+      <field name="_initialized">false</field>
+      <method name="_selectPane">
+        <parameter name="aPaneElement"/>
+        <body>
+        <![CDATA[
+          if (/Mac/.test(navigator.platform)) {
+            var paneTitle = aPaneElement.label;
+            if (paneTitle != "")
+              document.title = paneTitle;
+          }
+          var helpButton = document.documentElement.getButton("help");
+          if (aPaneElement.helpTopic)
+            helpButton.hidden = false;
+          else
+            helpButton.hidden = true;
+
+          // Find this pane's index in the deck and set the deck's
+          // selectedIndex to that value to switch to it.
+          var prefpanes = this.preferencePanes;
+          for (var i = 0; i < prefpanes.length; ++i) {
+            if (prefpanes[i] == aPaneElement) {
+              this._paneDeck.selectedIndex = i;
+
+              if (this.type != "child") {
+                if (aPaneElement.hasAttribute("flex") && this._shouldAnimate &&
+                    prefpanes.length > 1)
+                  aPaneElement.removeAttribute("flex");
+                // Calling sizeToContent after the first prefpane is loaded
+                // will size the windows contents so style information is
+                // available to calculate correct sizing.
+                if (!this._initialized && prefpanes.length > 1) {
+                  if (this._shouldAnimate)
+                    this.style.minHeight = 0;
+                  window.sizeToContent();
+                }
+
+                var oldPane = this.lastSelected ? document.getElementById(this.lastSelected) : this.preferencePanes[0];
+                oldPane.selected = !(aPaneElement.selected = true);
+                this.lastSelected = aPaneElement.id;
+                this.currentPane = aPaneElement;
+                this._initialized = true;
+
+                // Only animate if we've switched between prefpanes
+                if (this._shouldAnimate && oldPane.id != aPaneElement.id) {
+                  aPaneElement.style.opacity = 0.0;
+                  this.animate(oldPane, aPaneElement);
+                } else if (!this._shouldAnimate && prefpanes.length > 1) {
+                  var targetHeight = parseInt(window.getComputedStyle(this._paneDeckContainer).height);
+                  var verticalPadding = parseInt(window.getComputedStyle(aPaneElement).paddingTop);
+                  verticalPadding += parseInt(window.getComputedStyle(aPaneElement).paddingBottom);
+                  if (aPaneElement.contentHeight > targetHeight - verticalPadding) {
+                    // To workaround the bottom border of a groupbox from being
+                    // cutoff an hbox with a class of bottomBox may enclose it.
+                    // This needs to include its padding to resize properly.
+                    // See bug 394433
+                    var bottomPadding = 0;
+                    var bottomBox = aPaneElement.getElementsByAttribute("class", "bottomBox")[0];
+                    if (bottomBox)
+                      bottomPadding = parseInt(window.getComputedStyle(bottomBox).paddingBottom);
+                    window.innerHeight += bottomPadding + verticalPadding + aPaneElement.contentHeight - targetHeight;
+                  }
+
+                  // XXX rstrong - extend the contents of the prefpane to
+                  // prevent elements from being cutoff (see bug 349098).
+                  if (aPaneElement.contentHeight + verticalPadding < targetHeight)
+                    aPaneElement._content.style.height = targetHeight - verticalPadding + "px";
+                }
+              }
+              break;
+            }
+          }
+        ]]>
+        </body>
+      </method>
+
+      <property name="_shouldAnimate">
+        <getter>
+        <![CDATA[
+          var psvc = Components.classes["@mozilla.org/preferences-service;1"]
+                               .getService(Components.interfaces.nsIPrefBranch);
+          return psvc.getBoolPref("browser.preferences.animateFadeIn",
+                                  /Mac/.test(navigator.platform));
+        ]]>
+        </getter>
+      </property>
+
+      <method name="animate">
+        <parameter name="aOldPane"/>
+        <parameter name="aNewPane"/>
+        <body>
+        <![CDATA[
+          // if we are already resizing, use currentHeight
+          var oldHeight = this._currentHeight ? this._currentHeight : aOldPane.contentHeight;
+
+          this._multiplier = aNewPane.contentHeight > oldHeight ? 1 : -1;
+          var sizeDelta = Math.abs(oldHeight - aNewPane.contentHeight);
+          this._animateRemainder = sizeDelta % this._animateIncrement;
+
+          this._setUpAnimationTimer(oldHeight);
+        ]]>
+        </body>
+      </method>
+
+      <property name="_sizeIncrement">
+        <getter>
+        <![CDATA[
+          var lastSelectedPane = document.getElementById(this.lastSelected);
+          var increment = this._animateIncrement * this._multiplier;
+          var newHeight = this._currentHeight + increment;
+          if ((this._multiplier > 0 && this._currentHeight >= lastSelectedPane.contentHeight) ||
+              (this._multiplier < 0 && this._currentHeight <= lastSelectedPane.contentHeight))
+            return 0;
+
+          if ((this._multiplier > 0 && newHeight > lastSelectedPane.contentHeight) ||
+              (this._multiplier < 0 && newHeight < lastSelectedPane.contentHeight))
+            increment = this._animateRemainder * this._multiplier;
+          return increment;
+        ]]>
+        </getter>
+      </property>
+
+      <method name="notify">
+        <parameter name="aTimer"/>
+        <body>
+        <![CDATA[
+          if (!document)
+            aTimer.cancel();
+
+          if (aTimer == this._animateTimer) {
+            var increment = this._sizeIncrement;
+            if (increment != 0) {
+              window.innerHeight += increment;
+              this._currentHeight += increment;
+            } else {
+              aTimer.cancel();
+              this._setUpFadeTimer();
+            }
+          } else if (aTimer == this._fadeTimer) {
+            var elt = document.getElementById(this.lastSelected);
+            var newOpacity = parseFloat(window.getComputedStyle(elt).opacity) + this._fadeIncrement;
+            if (newOpacity < 1.0)
+              elt.style.opacity = newOpacity;
+            else {
+              aTimer.cancel();
+              elt.style.opacity = 1.0;
+            }
+          }
+        ]]>
+        </body>
+      </method>
+
+      <method name="_setUpAnimationTimer">
+        <parameter name="aStartHeight"/>
+        <body>
+        <![CDATA[
+          if (!this._animateTimer)
+            this._animateTimer = Components.classes["@mozilla.org/timer;1"]
+                                           .createInstance(Components.interfaces.nsITimer);
+          else
+            this._animateTimer.cancel();
+          this._currentHeight = aStartHeight;
+
+          this._animateTimer.initWithCallback(this, this._animateDelay,
+                                              Components.interfaces.nsITimer.TYPE_REPEATING_SLACK);
+        ]]>
+        </body>
+      </method>
+
+      <method name="_setUpFadeTimer">
+        <body>
+        <![CDATA[
+          if (!this._fadeTimer)
+            this._fadeTimer = Components.classes["@mozilla.org/timer;1"]
+                                        .createInstance(Components.interfaces.nsITimer);
+          else
+            this._fadeTimer.cancel();
+
+          this._fadeTimer.initWithCallback(this, this._fadeDelay,
+                                           Components.interfaces.nsITimer.TYPE_REPEATING_SLACK);
+        ]]>
+        </body>
+      </method>
+
+      <field name="_animateTimer">null</field>
+      <field name="_fadeTimer">null</field>
+      <field name="_animateDelay">15</field>
+      <field name="_animateIncrement">40</field>
+      <field name="_fadeDelay">5</field>
+      <field name="_fadeIncrement">0.40</field>
+      <field name="_animateRemainder">0</field>
+      <field name="_currentHeight">0</field>
+      <field name="_multiplier">0</field>
+
+      <method name="addPane">
+        <parameter name="aPaneElement"/>
+        <body>
+        <![CDATA[
+          this.appendChild(aPaneElement);
+
+          // Set up pane button
+          this._makePaneButton(aPaneElement);
+        ]]>
+        </body>
+      </method>
+
+      <method name="openSubDialog">
+        <parameter name="aURL"/>
+        <parameter name="aFeatures"/>
+        <parameter name="aParams"/>
+        <body>
+          return openDialog(aURL, "", "modal,centerscreen,resizable=no" + (aFeatures != "" ? ("," + aFeatures) : ""), aParams);
+        </body>
+      </method>
+
+      <method name="openWindow">
+        <parameter name="aWindowType"/>
+        <parameter name="aURL"/>
+        <parameter name="aFeatures"/>
+        <parameter name="aParams"/>
+        <body>
+        <![CDATA[
+          var wm = Components.classes["@mozilla.org/appshell/window-mediator;1"]
+                             .getService(Components.interfaces.nsIWindowMediator);
+          var win = aWindowType ? wm.getMostRecentWindow(aWindowType) : null;
+          if (win) {
+            if ("initWithParams" in win)
+              win.initWithParams(aParams);
+            win.focus();
+          } else {
+            var features = "resizable,dialog=no,centerscreen" + (aFeatures != "" ? ("," + aFeatures) : "");
+            var parentWindow = (this.instantApply || !window.opener || window.opener.closed) ? window : window.opener;
+            win = parentWindow.openDialog(aURL, "_blank", features, aParams);
+          }
+          return win;
+        ]]>
+        </body>
+      </method>
+    </implementation>
+    <handlers>
+      <handler event="dialogaccept">
+      <![CDATA[
+        if (!this._fireEvent("beforeaccept", this)) {
+          return false;
+        }
+
+        var secMan = Components.classes["@mozilla.org/scriptsecuritymanager;1"]
+                    .getService(Components.interfaces.nsIScriptSecurityManager);
+        if (this.type == "child" && window.opener &&
+            secMan.isSystemPrincipal(window.opener.document.nodePrincipal)) {
+          var pdocEl = window.opener.document.documentElement;
+          if (pdocEl.instantApply) {
+            let panes = this.preferencePanes;
+            for (let i = 0; i < panes.length; ++i)
+              panes[i].writePreferences(true);
+          } else {
+            // Clone all the preferences elements from the child document and
+            // insert them into the pane collection of the parent.
+            var pdoc = window.opener.document;
+            if (pdoc.documentElement.localName == "prefwindow") {
+              var currentPane = pdoc.documentElement.currentPane;
+              var id = window.location.href + "#childprefs";
+              var childPrefs = pdoc.getElementById(id);
+              if (!childPrefs) {
+                childPrefs = pdoc.createElement("preferences");
+                currentPane.appendChild(childPrefs);
+                childPrefs.id = id;
+              }
+              let panes = this.preferencePanes;
+              for (let i = 0; i < panes.length; ++i) {
+                var preferences = panes[i].preferences;
+                for (var j = 0; j < preferences.length; ++j) {
+                  // Try to find a preference element for the same preference.
+                  var preference = null;
+                  var parentPreferences = pdoc.getElementsByTagName("preferences");
+                  for (var k = 0; (k < parentPreferences.length && !preference); ++k) {
+                    var parentPrefs = parentPreferences[k]
+                                         .getElementsByAttribute("name", preferences[j].name);
+                    for (var l = 0; (l < parentPrefs.length && !preference); ++l) {
+                      if (parentPrefs[l].localName == "preference")
+                        preference = parentPrefs[l];
+                    }
+                  }
+                  if (!preference) {
+                    // No matching preference in the parent window.
+                    preference = pdoc.createElement("preference");
+                    childPrefs.appendChild(preference);
+                    preference.name     = preferences[j].name;
+                    preference.type     = preferences[j].type;
+                    preference.inverted = preferences[j].inverted;
+                    preference.readonly = preferences[j].readonly;
+                    preference.disabled = preferences[j].disabled;
+                  }
+                  preference.value = preferences[j].value;
+                }
+              }
+            }
+          }
+        } else {
+          let panes = this.preferencePanes;
+          for (var i = 0; i < panes.length; ++i)
+            panes[i].writePreferences(false);
+
+          let psvc = Components.classes["@mozilla.org/preferences-service;1"]
+                               .getService(Components.interfaces.nsIPrefService);
+          psvc.savePrefFile(null);
+        }
+
+        return true;
+      ]]>
+      </handler>
+      <handler event="command">
+        if (event.originalTarget.hasAttribute("pane")) {
+          var pane = document.getElementById(event.originalTarget.getAttribute("pane"));
+          this.showPane(pane);
+        }
+      </handler>
+
+      <handler event="keypress" key="&windowClose.key;" modifiers="accel" phase="capturing">
+      <![CDATA[
+        if (this.instantApply)
+          window.close();
+        event.stopPropagation();
+        event.preventDefault();
+      ]]>
+      </handler>
+
+      <handler event="keypress"
+#ifdef XP_MACOSX
+               key="&openHelpMac.commandkey;" modifiers="accel"
+#else
+               keycode="&openHelp.commandkey;"
+#endif
+               phase="capturing">
+      <![CDATA[
+        var helpButton = this.getButton("help");
+        if (helpButton.disabled || helpButton.hidden)
+          return;
+        this._fireEvent("dialoghelp", this);
+        event.stopPropagation();
+        event.preventDefault();
+      ]]>
+      </handler>
+    </handlers>
+  </binding>
+
+  <binding id="prefpane">
+    <resources>
+      <stylesheet src="chrome://global/skin/preferences.css"/>
+    </resources>
+    <content>
+      <xul:vbox class="content-box" xbl:inherits="flex">
+        <children/>
+      </xul:vbox>
+    </content>
+    <implementation>
+      <method name="writePreferences">
+        <parameter name="aFlushToDisk"/>
+        <body>
+        <![CDATA[
+          // Write all values to preferences.
+          if (this._deferredValueUpdateElements.size) {
+            this._finalizeDeferredElements();
+          }
+
+          var preferences = this.preferences;
+          for (var i = 0; i < preferences.length; ++i) {
+            var preference = preferences[i];
+            preference.batching = true;
+            preference.valueFromPreferences = preference.value;
+            preference.batching = false;
+          }
+          if (aFlushToDisk) {
+            var psvc = Components.classes["@mozilla.org/preferences-service;1"]
+                                 .getService(Components.interfaces.nsIPrefService);
+            psvc.savePrefFile(null);
+          }
+        ]]>
+        </body>
+      </method>
+
+      <property name="src"
+                onget="return this.getAttribute('src');"
+                onset="this.setAttribute('src', val); return val;"/>
+      <property name="selected"
+                onget="return this.getAttribute('selected') == 'true';"
+                onset="this.setAttribute('selected', val); return val;"/>
+      <property name="image"
+                onget="return this.getAttribute('image');"
+                onset="this.setAttribute('image', val); return val;"/>
+      <property name="label"
+                onget="return this.getAttribute('label');"
+                onset="this.setAttribute('label', val); return val;"/>
+
+      <property name="preferenceElements"
+                onget="return this.getElementsByAttribute('preference', '*');"/>
+      <property name="preferences"
+                onget="return this.getElementsByTagName('preference');"/>
+
+      <property name="helpTopic">
+        <getter>
+        <![CDATA[
+          // if there are tabs, and the selected tab provides a helpTopic, return that
+          var box = this.getElementsByTagName("tabbox");
+          if (box[0]) {
+            var tab = box[0].selectedTab;
+            if (tab && tab.hasAttribute("helpTopic"))
+              return tab.getAttribute("helpTopic");
+          }
+
+          // otherwise, return the helpTopic of the current panel
+          return this.getAttribute("helpTopic");
+        ]]>
+        </getter>
+      </property>
+
+      <field name="_loaded">false</field>
+      <property name="loaded"
+                onget="return !this.src ? true : this._loaded;"
+                onset="this._loaded = val; return val;"/>
+
+      <method name="preferenceForElement">
+        <parameter name="aElement"/>
+        <body>
+          return document.getElementById(aElement.getAttribute("preference"));
+        </body>
+      </method>
+
+      <method name="getPreferenceElement">
+        <parameter name="aStartElement"/>
+        <body>
+        <![CDATA[
+          var temp = aStartElement;
+          while (temp && temp.nodeType == Node.ELEMENT_NODE &&
+                 !temp.hasAttribute("preference"))
+            temp = temp.parentNode;
+          return temp && temp.nodeType == Node.ELEMENT_NODE ?
+                 temp : aStartElement;
+        ]]>
+        </body>
+      </method>
+
+      <property name="DeferredTask" readonly="true">
+        <getter><![CDATA[
+          let module = {};
+          Components.utils.import("resource://gre/modules/DeferredTask.jsm", module);
+          Object.defineProperty(this, "DeferredTask", {
+            configurable: true,
+            enumerable: true,
+            writable: true,
+            value: module.DeferredTask
+          });
+          return module.DeferredTask;
+        ]]></getter>
+      </property>
+      <method name="_deferredValueUpdate">
+        <parameter name="aElement"/>
+        <body>
+        <![CDATA[
+          delete aElement._deferredValueUpdateTask;
+          let preference = document.getElementById(aElement.getAttribute("preference"));
+          let prefVal = preference.getElementValue(aElement);
+          preference.value = prefVal;
+          this._deferredValueUpdateElements.delete(aElement);
+        ]]>
+        </body>
+      </method>
+      <field name="_deferredValueUpdateElements">
+        new Set();
+      </field>
+      <method name="_finalizeDeferredElements">
+        <body>
+        <![CDATA[
+          for (let el of this._deferredValueUpdateElements) {
+            if (el._deferredValueUpdateTask) {
+              el._deferredValueUpdateTask.finalize();
+            }
+          }
+        ]]>
+        </body>
+      </method>
+      <method name="userChangedValue">
+        <parameter name="aElement"/>
+        <body>
+        <![CDATA[
+          let element = this.getPreferenceElement(aElement);
+          if (element.hasAttribute("preference")) {
+            if (element.getAttribute("delayprefsave") != "true") {
+              var preference = document.getElementById(element.getAttribute("preference"));
+              var prefVal = preference.getElementValue(element);
+              preference.value = prefVal;
+            } else {
+              if (!element._deferredValueUpdateTask) {
+                element._deferredValueUpdateTask = new this.DeferredTask(this._deferredValueUpdate.bind(this, element), 1000);
+                this._deferredValueUpdateElements.add(element);
+              } else {
+                // Each time the preference is changed, restart the delay.
+                element._deferredValueUpdateTask.disarm();
+              }
+              element._deferredValueUpdateTask.arm();
+            }
+          }
+        ]]>
+        </body>
+      </method>
+
+      <property name="contentHeight">
+        <getter>
+          var targetHeight = parseInt(window.getComputedStyle(this._content).height);
+          targetHeight += parseInt(window.getComputedStyle(this._content).marginTop);
+          targetHeight += parseInt(window.getComputedStyle(this._content).marginBottom);
+          return targetHeight;
+        </getter>
+      </property>
+      <field name="_content">
+        document.getAnonymousElementByAttribute(this, "class", "content-box");
+      </field>
+    </implementation>
+    <handlers>
+      <handler event="command">
+        // This "command" event handler tracks changes made to preferences by
+        // the user in this window.
+        if (event.sourceEvent)
+          event = event.sourceEvent;
+        this.userChangedValue(event.target);
+      </handler>
+      <handler event="select">
+        // This "select" event handler tracks changes made to colorpicker
+        // preferences by the user in this window.
+        if (event.target.localName == "colorpicker")
+          this.userChangedValue(event.target);
+      </handler>
+      <handler event="change">
+        // This "change" event handler tracks changes made to preferences by
+        // the user in this window.
+        this.userChangedValue(event.target);
+      </handler>
+      <handler event="input">
+        // This "input" event handler tracks changes made to preferences by
+        // the user in this window.
+        this.userChangedValue(event.target);
+      </handler>
+      <handler event="paneload">
+      <![CDATA[
+        // Initialize all values from preferences.
+        var elements = this.preferenceElements;
+        for (var i = 0; i < elements.length; ++i) {
+          try {
+            var preference = this.preferenceForElement(elements[i]);
+            preference.setElementValue(elements[i]);
+          } catch (e) {
+            dump("*** No preference found for " + elements[i].getAttribute("preference") + "\n");
+          }
+        }
+      ]]>
+      </handler>
+    </handlers>
+  </binding>
+
+  <binding id="panebutton" role="xul:listitem"
+           extends="chrome://global/content/bindings/radio.xml#radio">
+    <resources>
+      <stylesheet src="chrome://global/skin/preferences.css"/>
+    </resources>
+    <content>
+      <xul:image class="paneButtonIcon" xbl:inherits="src"/>
+      <xul:label class="paneButtonLabel" xbl:inherits="value=label"/>
+    </content>
+  </binding>
+
+</bindings>
+
+# -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+#
+# This is PrefWindow 6. The Code Could Well Be Ready, Are You?
+#
+#    Historical References:
+#    PrefWindow V   (February 1, 2003)
+#    PrefWindow IV  (April 24, 2000)
+#    PrefWindow III (January 6, 2000)
+#    PrefWindow II  (???)
+#    PrefWindow I   (June 4, 1999)
+#
diff --git a/toolkit/themes/linux/global/preferences.css b/toolkit/themes/linux/global/preferences.css
new file mode 100644
--- /dev/null
+++ b/toolkit/themes/linux/global/preferences.css
@@ -0,0 +1,62 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/* ===== preferences.css =====================================================
+  == Styles used by the XUL prefwindow element.
+  ======================================================================= */
+
+@namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul");
+
+/* ::::: dialog ::::: */
+
+prefwindow {
+  padding: 0px;
+}
+
+prefpane {
+  padding: 8px;
+}
+
+prefwindow[type="child"] {
+  padding: 8px;
+}
+
+prefwindow[type="child"] > prefpane {
+  padding: 0px;
+}
+
+.prefWindow-dlgbuttons {
+  padding-bottom: 8px;
+  padding-inline-start: 8px;
+  padding-inline-end: 8px;
+}
+
+prefwindow[type="child"] .prefWindow-dlgbuttons {
+  padding: 0px;
+}
+
+radio[pane] {
+  -moz-appearance: none;
+  min-width: 4.5em;
+  margin: 0;
+  padding: 3px;
+  color: -moz-FieldText;
+}
+
+.paneSelector {
+  -moz-appearance: listbox;
+  margin: 8px 8px 0 8px;
+  padding: 0;
+}
+
+.paneButtonIcon {
+  width: 32px;
+  height: 32px;
+}
+
+radio[pane][selected="true"] {
+  background-color: Highlight;
+  color: HighlightText;
+}
+
diff --git a/toolkit/themes/osx/global/preferences.css b/toolkit/themes/osx/global/preferences.css
new file mode 100644
--- /dev/null
+++ b/toolkit/themes/osx/global/preferences.css
@@ -0,0 +1,59 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+@namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul");
+
+prefwindow {
+  padding: 0;
+  font: -moz-dialog !important;
+}
+
+prefpane {
+  padding: 12px 12px 0 12px;
+}
+
+prefwindow[type="child"] > prefpane {
+  padding: 0;
+}
+
+.prefWindow-dlgbuttons {
+  margin: 0 12px 12px;
+  padding-top: 0 !important;
+}
+
+.paneSelector {
+  font: message-box;
+  padding: 1px 4px;
+  -moz-appearance: toolbar;
+  margin: 0;
+}
+
+radio[pane] {
+  border: solid transparent;
+  border-width: 0 2px;
+  padding: 5px 4px 3px;
+  margin: 0;
+  -moz-appearance: none;
+  text-shadow: rgba(255, 255, 255, 0.4) 0 1px;
+}
+
+radio[pane]:active:hover {
+  text-shadow: none;
+}
+
+radio[pane]:active:hover > .paneButtonIcon {
+  filter: brightness(0.55);
+}
+
+radio[pane][selected="true"] {
+  -moz-border-image: url("chrome://global/skin/icons/panebutton-active.png") 0 2 fill repeat stretch;
+}
+
+radio[pane][selected="true"]:-moz-window-inactive {
+  -moz-border-image: url("chrome://global/skin/icons/panebutton-inactive.png") 0 2 fill repeat stretch;
+}
+
+.paneButtonLabel {
+  margin: 0 !important;
+}
diff --git a/toolkit/themes/windows/global/preferences.css b/toolkit/themes/windows/global/preferences.css
new file mode 100644
--- /dev/null
+++ b/toolkit/themes/windows/global/preferences.css
@@ -0,0 +1,76 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/* ===== preferences.css =====================================================
+  == Styles used by the XUL prefwindow element.
+  ======================================================================= */
+
+@namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul");
+
+/* ::::: dialog ::::: */
+
+prefwindow {
+  padding: 0px;
+}
+
+prefpane {
+  padding-top: 8px;
+  padding-bottom: 10px;
+  padding-inline-start: 8px;
+  padding-inline-end: 10px;
+}
+
+prefwindow[type="child"] {
+  padding-top: 8px;
+  padding-bottom: 10px;
+  padding-inline-start: 8px;
+  padding-inline-end: 10px;
+}
+
+prefwindow[type="child"] > prefpane {
+  padding: 0px;
+}
+
+.prefWindow-dlgbuttons {
+  padding-bottom: 10px;
+  padding-inline-start: 8px;
+  padding-inline-end: 10px;
+}
+
+prefwindow[type="child"] .prefWindow-dlgbuttons {
+  padding: 0px;
+}
+
+radio[pane] {
+  -moz-appearance: none;
+  margin: 0px 1px 0px 1px;
+  padding: 1px 3px 1px 3px;
+  min-width: 4.5em;
+}
+
+.paneSelector {
+  border-bottom: 2px groove ThreeDFace;
+  margin: 0px;
+  padding-inline-start: 10px;
+  background-color: -moz-Field;
+  color: -moz-FieldText;
+}
+
+.paneButtonIcon {
+  width: 32px;
+  height: 32px;
+}
+
+radio[pane]:hover {
+  background-color: #E0E8F6;
+  color: black;
+  -moz-appearance: none;
+}
+
+radio[pane][selected="true"] {
+  background-color: #C1D2EE;
+  color: black; 
+  -moz-appearance: none;
+}
+
diff --git a/toolkit/xre/nsXREDirProvider.cpp b/toolkit/xre/nsXREDirProvider.cpp
--- a/toolkit/xre/nsXREDirProvider.cpp
+++ b/toolkit/xre/nsXREDirProvider.cpp
@@ -941,16 +941,34 @@ nsXREDirProvider::GetFilesInternal(const
                         directories);
     }
 
     rv = NS_NewArrayEnumerator(aResult, directories);
     NS_ENSURE_SUCCESS(rv, rv);
 
     rv = NS_SUCCESS_AGGREGATE_RESULT;
   }
+  else if (!strcmp(aProperty, NS_EXT_PREFS_DEFAULTS_DIR_LIST)) {
+    nsCOMArray<nsIFile> directories;
+
+    LoadDirsIntoArray(AddonManagerStartup::GetSingleton().ExtensionPaths(),
+                      kAppendPrefDir, directories);
+
+    if (mProfileDir) {
+      nsCOMPtr<nsIFile> overrideFile;
+      mProfileDir->Clone(getter_AddRefs(overrideFile));
+      overrideFile->AppendNative(NS_LITERAL_CSTRING(PREF_OVERRIDE_DIRNAME));
+
+      bool exists;
+      if (NS_SUCCEEDED(overrideFile->Exists(&exists)) && exists)
+        directories.AppendObject(overrideFile);
+    }
+
+    rv = NS_NewArrayEnumerator(aResult, directories);
+  }
   else
     rv = NS_ERROR_FAILURE;
 
   return rv;
 }
 
 NS_IMETHODIMP
 nsXREDirProvider::GetDirectory(nsIFile* *aResult)
@@ -1021,16 +1039,18 @@ nsXREDirProvider::DoStartup()
     nsCOMPtr<nsIObserver> em = do_GetService("@mozilla.org/addons/integration;1");
     if (em) {
       em->Observe(nullptr, "addons-startup", nullptr);
     } else {
       NS_WARNING("Failed to create Addons Manager.");
     }
 
     obsSvc->NotifyObservers(nullptr, "profile-after-change", kStartup);
+    obsSvc->NotifyObservers(nullptr, "load-extension-defaults", nullptr);
+
 
     // Any component that has registered for the profile-after-change category
     // should also be created at this time.
     (void)NS_CreateServicesFromCategory("profile-after-change", nullptr,
                                         "profile-after-change");
 
     if (gSafeMode && safeModeNecessary) {
       static const char16_t kCrashed[] = {'c','r','a','s','h','e','d','\0'};
diff --git a/xpcom/io/nsAppDirectoryServiceDefs.h b/xpcom/io/nsAppDirectoryServiceDefs.h
--- a/xpcom/io/nsAppDirectoryServiceDefs.h
+++ b/xpcom/io/nsAppDirectoryServiceDefs.h
@@ -53,16 +53,17 @@
 // other users of the profile. Without this prefix, the consumer
 // has exclusive access to this location.
 
 #define NS_SHARED                               "SHARED"
 
 #define NS_APP_PREFS_50_DIR                     "PrefD"         // Directory which contains user prefs
 #define NS_APP_PREFS_50_FILE                    "PrefF"
 #define NS_APP_PREFS_DEFAULTS_DIR_LIST          "PrefDL"
+#define NS_EXT_PREFS_DEFAULTS_DIR_LIST          "ExtPrefDL"
 #define NS_APP_PREFS_OVERRIDE_DIR               "PrefDOverride" // Directory for per-profile defaults
 
 #define NS_APP_USER_PROFILE_50_DIR              "ProfD"
 #define NS_APP_USER_PROFILE_LOCAL_50_DIR        "ProfLD"
 
 #define NS_APP_USER_CHROME_DIR                  "UChrm"
 #define NS_APP_USER_SEARCH_DIR                  "UsrSrchPlugns"
 
# HG changeset patch
# User RealDolos <dolos@cock.li>
# Date 1517467085 -3600
#      Thu Feb 01 07:38:05 2018 +0100
# Node ID a88f8fb0ec2b3ecfe9a5856825e7bcc84c4baa58
# Parent  dbe6778113b329ffb93c0c75190b97568c3a7e7f
Put back nsIURI.path

diff --git a/caps/NullPrincipalURI.cpp b/caps/NullPrincipalURI.cpp
--- a/caps/NullPrincipalURI.cpp
+++ b/caps/NullPrincipalURI.cpp
@@ -148,22 +148,34 @@ NullPrincipalURI::SetPassword(const nsAC
 NS_IMETHODIMP
 NullPrincipalURI::GetPathQueryRef(nsACString& _path)
 {
   _path = mPath;
   return NS_OK;
 }
 
 NS_IMETHODIMP
+NullPrincipalURI::GetPath(nsACString& _path)
+{
+  return GetPathQueryRef(_path);
+}
+
+NS_IMETHODIMP
 NullPrincipalURI::SetPathQueryRef(const nsACString& aPath)
 {
   return NS_ERROR_NOT_IMPLEMENTED;
 }
 
 NS_IMETHODIMP
+NullPrincipalURI::SetPath(const nsACString& aPath)
+{
+  return SetPathQueryRef(aPath);
+}
+
+NS_IMETHODIMP
 NullPrincipalURI::GetFilePath(nsACString& aFilePath)
 {
   aFilePath.Truncate();
   return NS_ERROR_NOT_IMPLEMENTED;
 }
 
 NS_IMETHODIMP
 NullPrincipalURI::SetFilePath(const nsACString& aFilePath)
diff --git a/image/decoders/icon/nsIconURI.cpp b/image/decoders/icon/nsIconURI.cpp
--- a/image/decoders/icon/nsIconURI.cpp
+++ b/image/decoders/icon/nsIconURI.cpp
@@ -416,22 +416,34 @@ nsMozIconURI::SetPort(int32_t aPort)
 NS_IMETHODIMP
 nsMozIconURI::GetPathQueryRef(nsACString& aPath)
 {
   aPath.Truncate();
   return NS_OK;
 }
 
 NS_IMETHODIMP
+nsMozIconURI::GetPath(nsACString& aPath)
+{
+  return GetPathQueryRef(aPath);
+}
+
+NS_IMETHODIMP
 nsMozIconURI::SetPathQueryRef(const nsACString& aPath)
 {
   return NS_ERROR_FAILURE;
 }
 
 NS_IMETHODIMP
+nsMozIconURI::SetPath(const nsACString& aPath)
+{
+  return SetPathQueryRef(aPath);
+}
+
+NS_IMETHODIMP
 nsMozIconURI::GetFilePath(nsACString& aFilePath)
 {
   aFilePath.Truncate();
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsMozIconURI::SetFilePath(const nsACString& aFilePath)
diff --git a/modules/libjar/nsJARURI.cpp b/modules/libjar/nsJARURI.cpp
--- a/modules/libjar/nsJARURI.cpp
+++ b/modules/libjar/nsJARURI.cpp
@@ -509,22 +509,34 @@ NS_IMETHODIMP
 nsJARURI::GetPathQueryRef(nsACString &aPath)
 {
     nsAutoCString entrySpec;
     mJAREntry->GetSpec(entrySpec);
     return FormatSpec(entrySpec, aPath, false);
 }
 
 NS_IMETHODIMP
+nsJARURI::GetPath(nsACString &aPath)
+{
+    return GetPathQueryRef(aPath);
+}
+
+NS_IMETHODIMP
 nsJARURI::SetPathQueryRef(const nsACString &aPath)
 {
     return NS_ERROR_FAILURE;
 }
 
 NS_IMETHODIMP
+nsJARURI::SetPath(const nsACString &aPath)
+{
+    return SetPathQueryRef(aPath);
+}
+
+NS_IMETHODIMP
 nsJARURI::GetAsciiSpec(nsACString &aSpec)
 {
     // XXX Shouldn't this like... make sure it returns ASCII or something?
     return GetSpec(aSpec);
 }
 
 NS_IMETHODIMP
 nsJARURI::GetAsciiHostPort(nsACString &aHostPort)
diff --git a/netwerk/base/nsIURI.idl b/netwerk/base/nsIURI.idl
--- a/netwerk/base/nsIURI.idl
+++ b/netwerk/base/nsIURI.idl
@@ -181,16 +181,17 @@ interface nsIURI : nsISupports
      * empty, depending on the protocol).
      *
      * Some characters may be escaped.
      *
      * This attribute contains query and ref parts for historical reasons.
      * Use the 'filePath' attribute if you do not want those parts included.
      */
     attribute AUTF8String pathQueryRef;
+    attribute AUTF8String path;
 
 
     /************************************************************************
      * An URI supports the following methods:
      */
 
     /**
      * URI equivalence test (not a strict string comparison).
diff --git a/netwerk/base/nsSimpleURI.cpp b/netwerk/base/nsSimpleURI.cpp
--- a/netwerk/base/nsSimpleURI.cpp
+++ b/netwerk/base/nsSimpleURI.cpp
@@ -448,22 +448,35 @@ nsSimpleURI::GetPathQueryRef(nsACString 
     if (mIsRefValid) {
         result += NS_LITERAL_CSTRING("#") + mRef;
     }
 
     return NS_OK;
 }
 
 NS_IMETHODIMP
+nsSimpleURI::GetPath(nsACString &result)
+{
+    return GetPathQueryRef(result);
+}
+
+NS_IMETHODIMP
 nsSimpleURI::SetPathQueryRef(const nsACString &aPath)
 {
     NS_ENSURE_STATE(mMutable);
 
     return SetPathQueryRefEscaped(aPath, true);
 }
+
+NS_IMETHODIMP
+nsSimpleURI::SetPath(const nsACString &aPath)
+{
+    return SetPathQueryRef(aPath);
+}
+
 nsresult
 nsSimpleURI::SetPathQueryRefEscaped(const nsACString &aPath, bool aNeedsEscape)
 {
     nsresult rv;
     nsAutoCString path;
     if (aNeedsEscape) {
         rv = NS_EscapeURL(aPath, esc_OnlyNonASCII, path, fallible);
         if (NS_FAILED(rv)) {
diff --git a/netwerk/base/nsStandardURL.cpp b/netwerk/base/nsStandardURL.cpp
--- a/netwerk/base/nsStandardURL.cpp
+++ b/netwerk/base/nsStandardURL.cpp
@@ -1474,16 +1474,22 @@ nsStandardURL::GetPort(int32_t *result)
 // result may contain unescaped UTF-8 characters
 NS_IMETHODIMP
 nsStandardURL::GetPathQueryRef(nsACString &result)
 {
     result = Path();
     return NS_OK;
 }
 
+NS_IMETHODIMP
+nsStandardURL::GetPath(nsACString &result)
+{
+    return GetPathQueryRef(result);
+}
+
 // result is ASCII
 NS_IMETHODIMP
 nsStandardURL::GetAsciiSpec(nsACString &result)
 {
     if (mSpecEncoding == eEncoding_Unknown) {
         if (IsASCII(mSpec))
             mSpecEncoding = eEncoding_ASCII;
         else
@@ -2221,16 +2227,22 @@ nsStandardURL::SetPathQueryRef(const nsA
         mBasename.mLen = -1;
         mExtension.mLen = -1;
         mQuery.mLen = -1;
         mRef.mLen = -1;
     }
     return NS_OK;
 }
 
+NS_IMETHODIMP
+nsStandardURL::SetPath(const nsACString &input)
+{
+    return SetPathQueryRef(input);
+}
+
 // When updating this also update SubstitutingURL::Mutator
 NS_IMPL_ISUPPORTS(nsStandardURL::Mutator,
                   nsIURISetters,
                   nsIURIMutator,
                   nsIStandardURLMutator,
                   nsIURLMutator,
                   nsIFileURLMutator)
 
# HG changeset patch
# User RealDolos <dolos@cock.li>
# Date 1517467105 -3600
#      Thu Feb 01 07:38:25 2018 +0100
# Node ID 5ee7cb7566ed8657fd6418103f4b85539366b4c7
# Parent  a88f8fb0ec2b3ecfe9a5856825e7bcc84c4baa58
Put back nsIProgrammingLanguage

diff --git a/xpcom/base/moz.build b/xpcom/base/moz.build
--- a/xpcom/base/moz.build
+++ b/xpcom/base/moz.build
@@ -15,16 +15,17 @@ XPIDL_SOURCES += [
     'nsIGZFileWriter.idl',
     'nsIInterfaceRequestor.idl',
     'nsILoadURIDelegate.idl',
     'nsIMemory.idl',
     'nsIMemoryInfoDumper.idl',
     'nsIMemoryReporter.idl',
     'nsIMessageLoop.idl',
     'nsIMutable.idl',
+    'nsIProgrammingLanguage.idl',
     'nsISecurityConsoleMessage.idl',
     'nsISupports.idl',
     'nsIUUIDGenerator.idl',
     'nsIVersionComparator.idl',
     'nsIWeakReference.idl',
     'nsrootidl.idl',
 ]
 
diff --git a/xpcom/base/nsIProgrammingLanguage.idl b/xpcom/base/nsIProgrammingLanguage.idl
new file mode 100644
--- /dev/null
+++ b/xpcom/base/nsIProgrammingLanguage.idl
@@ -0,0 +1,25 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "nsISupports.idl"
+
+/**
+ * Legacy constants for specifying programming languages.
+ *
+ * JAVASCRIPT is needed to avoid breaking addons that use it in nsIClassInfo
+ * to define fields that are no longer needed.
+ *
+ * UNKNOWN and JAVASCRIPT are also used in implementations of
+ * nsIStackFrame::language.
+ */
+
+[scriptable, uuid(02ad9f22-3c98-46f3-be4e-2f5c9299e29a)]
+interface nsIProgrammingLanguage : nsISupports
+{
+    const uint32_t UNKNOWN     = 0;
+    // 1 is unused.
+    const uint32_t JAVASCRIPT  = 2;
+};
# HG changeset patch
# User RealDolos <dolos@cock.li>
# Date 1517467168 -3600
#      Thu Feb 01 07:39:28 2018 +0100
# Node ID 6ca0c0437b34ce34623b482c8db100e52aea33a5
# Parent  5ee7cb7566ed8657fd6418103f4b85539366b4c7
Who needs security theater?

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -79,17 +79,17 @@ pref("extensions.webextensions.default-c
 #ifdef XP_WIN
 pref("extensions.webextensions.remote", true);
 #endif
 
 // Extensions that should not be flagged as legacy in about:addons
 pref("extensions.legacy.exceptions", "{972ce4c6-7e08-4474-a285-3208198ce6fd},testpilot@cliqz.com,@testpilot-containers,jid1-NeEaf3sAHdKHPA@jetpack,@activity-streams,pulse@mozilla.com,@testpilot-addon,@min-vid,tabcentertest1@mozilla.com,snoozetabs@mozilla.com,speaktome@mozilla.com,hoverpad@mozilla.com");
 
 // Require signed add-ons by default
-pref("xpinstall.signatures.required", true);
+pref("xpinstall.signatures.required", false);
 pref("xpinstall.signatures.devInfoURL", "https://wiki.mozilla.org/Addons/Extension_Signing");
 
 // Dictionary download preference
 pref("browser.dictionaries.download.url", "https://addons.mozilla.org/%LOCALE%/firefox/dictionaries/");
 
 // At startup, should we check to see if the installation
 // date is older than some threshold
 pref("app.update.checkInstallTime", true);
@@ -1576,17 +1576,17 @@ pref("browser.tabs.crashReporting.email"
 pref("extensions.interposition.enabled", true);
 pref("extensions.interposition.prefetching", true);
 
 // But don't allow non-MPC extensions by default on Nightly
 #if defined(NIGHTLY_BUILD)
 pref("extensions.allow-non-mpc-extensions", false);
 #endif
 
-pref("extensions.legacy.enabled", false);
+pref("extensions.legacy.enabled", true);
 
 // How often to check for CPOW timeouts. CPOWs are only timed out by
 // the hang monitor.
 pref("dom.ipc.cpow.timeout", 500);
 
 // Causes access on unsafe CPOWs from browser code to throw by default.
 pref("dom.ipc.cpows.forbid-unsafe-from-browser", true);
 
# HG changeset patch
# User RealDolos <dolos@cock.li>
# Date 1518541852 -3600
#      Tue Feb 13 18:10:52 2018 +0100
# Node ID dc44888b8d4d22312bd7ba775d69ec62aa2745f8
# Parent  6ca0c0437b34ce34623b482c8db100e52aea33a5
Put back nsILocalFile

diff --git a/xpcom/io/moz.build b/xpcom/io/moz.build
--- a/xpcom/io/moz.build
+++ b/xpcom/io/moz.build
@@ -14,16 +14,17 @@ XPIDL_SOURCES += [
     'nsIConverterOutputStream.idl',
     'nsIDirectoryEnumerator.idl',
     'nsIDirectoryService.idl',
     'nsIFile.idl',
     'nsIInputStream.idl',
     'nsIInputStreamTee.idl',
     'nsIIOUtil.idl',
     'nsILineInputStream.idl',
+    'nsILocalFile.idl',
     'nsILocalFileWin.idl',
     'nsIMultiplexInputStream.idl',
     'nsIObjectInputStream.idl',
     'nsIObjectOutputStream.idl',
     'nsIOutputStream.idl',
     'nsIPipe.idl',
     'nsISafeOutputStream.idl',
     'nsIScriptableBase64Encoder.idl',
diff --git a/xpcom/io/nsILocalFile.idl b/xpcom/io/nsILocalFile.idl
new file mode 100644
--- /dev/null
+++ b/xpcom/io/nsILocalFile.idl
@@ -0,0 +1,16 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "nsIFile.idl"
+
+/**
+ * An empty interface to provide backwards compatibility for existing code.
+ *
+ * @see nsIFile
+ */
+[scriptable, builtinclass, uuid(7ba8c6ba-2ce2-48b1-bd60-4c32aac35f9c)]
+interface nsILocalFile : nsIFile
+{
+};
diff --git a/xpcom/io/nsILocalFileMac.idl b/xpcom/io/nsILocalFileMac.idl
--- a/xpcom/io/nsILocalFileMac.idl
+++ b/xpcom/io/nsILocalFileMac.idl
@@ -1,28 +1,28 @@
 /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-#include "nsIFile.idl"
+#include "nsILocalFile.idl"
 
 %{C++
 #include <Carbon/Carbon.h>
 #include <CoreFoundation/CoreFoundation.h>
 %}
 
       native OSType(OSType);
       native FSSpec(FSSpec);
       native FSRef(FSRef);
 [ptr] native FSRefPtr(FSRef);
       native CFURLRef(CFURLRef);
 
 [scriptable, builtinclass, uuid(623eca5b-c25d-4e27-be5a-789a66c4b2f7)]
-interface nsILocalFileMac : nsIFile
+interface nsILocalFileMac : nsILocalFile
 {
    /**
     * initWithCFURL
     *
     * Init this object with a CFURLRef
     *
     * NOTE: Supported only for XP_MACOSX
     * NOTE: If the path of the CFURL is /a/b/c, at least a/b must exist beforehand.
diff --git a/xpcom/io/nsILocalFileWin.idl b/xpcom/io/nsILocalFileWin.idl
--- a/xpcom/io/nsILocalFileWin.idl
+++ b/xpcom/io/nsILocalFileWin.idl
@@ -1,24 +1,24 @@
 /* -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
  * This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  */
 
-#include "nsIFile.idl"
+#include "nsILocalFile.idl"
 
 %{C++
 struct PRFileDesc;
 %}
 
 [ptr] native PRFileDescStar(PRFileDesc);
 
 [scriptable, builtinclass, uuid(e7a3a954-384b-4aeb-a5f7-55626b0de9be)]
-interface nsILocalFileWin : nsIFile
+interface nsILocalFileWin : nsILocalFile
 {
     /**
      *  initWithCommandLine
      *
      *  Initialize this object based on the main app path of a commandline
      *  handler.
      *
      *   @param aCommandLine
diff --git a/xpcom/io/nsLocalFileUnix.cpp b/xpcom/io/nsLocalFileUnix.cpp
--- a/xpcom/io/nsLocalFileUnix.cpp
+++ b/xpcom/io/nsLocalFileUnix.cpp
@@ -235,20 +235,22 @@ nsLocalFile::nsLocalFile(const nsACStrin
 nsLocalFile::nsLocalFile(const nsLocalFile& aOther)
   : mPath(aOther.mPath)
 {
 }
 
 #ifdef MOZ_WIDGET_COCOA
 NS_IMPL_ISUPPORTS(nsLocalFile,
                   nsILocalFileMac,
+                  nsILocalFile,
                   nsIFile,
                   nsIHashable)
 #else
 NS_IMPL_ISUPPORTS(nsLocalFile,
+                  nsILocalFile,
                   nsIFile,
                   nsIHashable)
 #endif
 
 nsresult
 nsLocalFile::nsLocalFileConstructor(nsISupports* aOuter,
                                     const nsIID& aIID,
                                     void** aInstancePtr)
diff --git a/xpcom/io/nsLocalFileUnix.h b/xpcom/io/nsLocalFileUnix.h
--- a/xpcom/io/nsLocalFileUnix.h
+++ b/xpcom/io/nsLocalFileUnix.h
@@ -18,16 +18,18 @@
 #include "nscore.h"
 #include "nsString.h"
 #include "nsReadableUtils.h"
 #include "nsIHashable.h"
 #include "nsIClassInfoImpl.h"
 #include "mozilla/Attributes.h"
 #ifdef MOZ_WIDGET_COCOA
 #include "nsILocalFileMac.h"
+#else
+#include "nsILocalFile.h"
 #endif
 
 /**
  *  we need these for statfs()
  */
 #ifdef HAVE_SYS_STATVFS_H
   #if defined(__osf__) && defined(__DECCXX)
     extern "C" int statvfs(const char *, struct statvfs *);
@@ -78,32 +80,33 @@
   #define LSTAT lstat
 #endif
 
 
 class nsLocalFile final
 #ifdef MOZ_WIDGET_COCOA
   : public nsILocalFileMac
 #else
-  : public nsIFile
+  : public nsILocalFile
 #endif
   , public nsIHashable
 {
 public:
   NS_DEFINE_STATIC_CID_ACCESSOR(NS_LOCAL_FILE_CID)
 
   nsLocalFile();
   explicit nsLocalFile(const nsACString& aFilePath);
 
   static nsresult nsLocalFileConstructor(nsISupports* aOuter,
                                          const nsIID& aIID,
                                          void** aInstancePtr);
 
   NS_DECL_THREADSAFE_ISUPPORTS
   NS_DECL_NSIFILE
+  NS_DECL_NSILOCALFILE
 #ifdef MOZ_WIDGET_COCOA
   NS_DECL_NSILOCALFILEMAC
 #endif
   NS_DECL_NSIHASHABLE
 
 private:
   nsLocalFile(const nsLocalFile& aOther);
   ~nsLocalFile()
diff --git a/xpcom/io/nsLocalFileWin.cpp b/xpcom/io/nsLocalFileWin.cpp
--- a/xpcom/io/nsLocalFileWin.cpp
+++ b/xpcom/io/nsLocalFileWin.cpp
@@ -826,16 +826,17 @@ nsLocalFile::nsLocalFileConstructor(nsIS
 }
 
 
 //-----------------------------------------------------------------------------
 // nsLocalFile::nsISupports
 //-----------------------------------------------------------------------------
 
 NS_IMPL_ISUPPORTS(nsLocalFile,
+                  nsILocalFile,
                   nsIFile,
                   nsILocalFileWin,
                   nsIHashable)
 
 
 //-----------------------------------------------------------------------------
 // nsLocalFile <private>
 //-----------------------------------------------------------------------------
diff --git a/xpcom/io/nsLocalFileWin.h b/xpcom/io/nsLocalFileWin.h
--- a/xpcom/io/nsLocalFileWin.h
+++ b/xpcom/io/nsLocalFileWin.h
@@ -39,16 +39,17 @@ public:
                                          const nsIID& aIID,
                                          void** aInstancePtr);
 
   // nsISupports interface
   NS_DECL_THREADSAFE_ISUPPORTS
 
   // nsIFile interface
   NS_DECL_NSIFILE
+  NS_DECL_NSILOCALFILE
 
   // nsILocalFileWin interface
   NS_DECL_NSILOCALFILEWIN
 
   // nsIHashable interface
   NS_DECL_NSIHASHABLE
 
 public:
# HG changeset patch
# User RealDolos <dolos@cock.li>
# Date 1517496982 -3600
#      Thu Feb 01 15:56:22 2018 +0100
# Node ID 15b640f09e10cbd12603e1ecd494e0de0bef199e
# Parent  dc44888b8d4d22312bd7ba775d69ec62aa2745f8
Allow more "old" add-ons

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1573,17 +1573,17 @@ pref("browser.tabs.crashReporting.emailM
 pref("browser.tabs.crashReporting.email", "");
 
 // Enable e10s add-on interposition by default.
 pref("extensions.interposition.enabled", true);
 pref("extensions.interposition.prefetching", true);
 
 // But don't allow non-MPC extensions by default on Nightly
 #if defined(NIGHTLY_BUILD)
-pref("extensions.allow-non-mpc-extensions", false);
+pref("extensions.allow-non-mpc-extensions", true);
 #endif
 
 pref("extensions.legacy.enabled", true);
 
 // How often to check for CPOW timeouts. CPOWs are only timed out by
 // the hang monitor.
 pref("dom.ipc.cpow.timeout", 500);
 
diff --git a/toolkit/mozapps/extensions/internal/XPIInstall.jsm b/toolkit/mozapps/extensions/internal/XPIInstall.jsm
--- a/toolkit/mozapps/extensions/internal/XPIInstall.jsm
+++ b/toolkit/mozapps/extensions/internal/XPIInstall.jsm
@@ -578,17 +578,17 @@ async function loadManifestFromRDF(aUri,
     addon.multiprocessCompatible = mpcValue == "true";
     addon.mpcOptedOut = mpcValue == "false";
 
     addon.hasEmbeddedWebExtension = getRDFProperty(ds, root, "hasEmbeddedWebExtension") == "true";
 
     if (addon.optionsType &&
         addon.optionsType != AddonManager.OPTIONS_INLINE_BROWSER &&
         addon.optionsType != AddonManager.OPTIONS_TYPE_TAB) {
-      throw new Error("Install manifest specifies unknown optionsType: " + addon.optionsType);
+      //throw new Error("Install manifest specifies unknown optionsType: " + addon.optionsType);
     }
 
     if (addon.hasEmbeddedWebExtension) {
       let uri = Services.io.newURI("webextension/manifest.json", null, aUri);
       let embeddedAddon = await loadManifestFromWebManifest(uri);
       if (embeddedAddon.optionsURL) {
         if (addon.optionsType || addon.optionsURL)
           logger.warn(`Addon ${addon.id} specifies optionsType or optionsURL ` +
# HG changeset patch
# User RealDolos <dolos@cock.li>
# Date 1517563916 -3600
#      Fri Feb 02 10:31:56 2018 +0100
# Node ID 59e54b3a7bf0cf029a0f1dec4bd42db3ba047954
# Parent  15b640f09e10cbd12603e1ecd494e0de0bef199e
Remove "feature" bloat such as pocket

diff --git a/browser/extensions/moz.build b/browser/extensions/moz.build
--- a/browser/extensions/moz.build
+++ b/browser/extensions/moz.build
@@ -6,34 +6,26 @@
 
 DIRS += [
     'activity-stream',
     'aushelper',
     'followonsearch',
     'formautofill',
     'onboarding',
     'pdfjs',
-    'pocket',
     'screenshots',
-    'shield-recipe-client',
     'webcompat',
 ]
 
 # Only include the following system add-ons if building Aurora or Nightly
 if not CONFIG['RELEASE_OR_BETA']:
     DIRS += [
         'presentation',
     ]
 
-# Only include the following system add-ons if building DevEdition or Nightly
-if CONFIG['MOZ_DEV_EDITION'] or CONFIG['NIGHTLY_BUILD']:
-    DIRS += [
-        'webcompat-reporter',
-    ]
-
 # Only include mortar system add-ons if we locally enable it
 if CONFIG['MOZ_MORTAR']:
     DIRS += [
         'mortar',
     ]
 
 # Add ASan reporter system add-on if requested
 if CONFIG['MOZ_ASAN_REPORTER']:
diff --git a/browser/locales/Makefile.in b/browser/locales/Makefile.in
--- a/browser/locales/Makefile.in
+++ b/browser/locales/Makefile.in
@@ -70,23 +70,19 @@ libs-%:
 	$(NSINSTALL) -D $(DIST)/install
 	@$(MAKE) -C ../../toolkit/locales libs-$* XPI_ROOT_APPID='$(XPI_ROOT_APPID)'
 	@$(MAKE) -C ../../services/sync/locales AB_CD=$* XPI_NAME=locale-$*
 	@$(MAKE) -C ../../extensions/spellcheck/locales AB_CD=$* XPI_NAME=locale-$*
 ifneq (,$(wildcard ../extensions/formautofill/locales))
 	@$(MAKE) -C ../extensions/formautofill/locales AB_CD=$* XPI_NAME=locale-$*
 endif
 	@$(MAKE) -C ../extensions/onboarding/locales AB_CD=$* XPI_NAME=locale-$*
-	@$(MAKE) -C ../extensions/pocket/locale AB_CD=$* XPI_NAME=locale-$*
 ifndef RELEASE_OR_BETA
 	@$(MAKE) -C ../extensions/presentation/locale AB_CD=$* XPI_NAME=locale-$*
 endif
-ifneq '$(or $(MOZ_DEV_EDITION),$(NIGHTLY_BUILD))' ''
-	@$(MAKE) -C ../extensions/webcompat-reporter/locales AB_CD=$* XPI_NAME=locale-$*
-endif
 	@$(MAKE) -C ../../devtools/client/locales AB_CD=$* XPI_NAME=locale-$* XPI_ROOT_APPID='$(XPI_ROOT_APPID)'
 	@$(MAKE) -C ../../devtools/shim/locales AB_CD=$* XPI_NAME=locale-$* XPI_ROOT_APPID='$(XPI_ROOT_APPID)'
 	@$(MAKE) -B searchplugins AB_CD=$* XPI_NAME=locale-$*
 	@$(MAKE) libs AB_CD=$* XPI_NAME=locale-$* PREF_DIR=$(PREF_DIR)
 	@$(MAKE) multilocale.json-$* AB_CD=$* XPI_NAME=locale-$*
 	@$(MAKE) -C $(DEPTH)/$(MOZ_BRANDING_DIRECTORY)/locales AB_CD=$* XPI_NAME=locale-$*
 
 chrome-%: AB_CD=$*
@@ -94,27 +90,23 @@ chrome-%: IS_LANGUAGE_REPACK=1
 chrome-%:
 	$(if $(filter en-US,$(AB_CD)),, @$(MAKE) merge-$*)
 	@$(MAKE) -C ../../toolkit/locales chrome-$*
 	@$(MAKE) -C ../../services/sync/locales chrome AB_CD=$*
 	@$(MAKE) -C ../../extensions/spellcheck/locales chrome AB_CD=$*
 ifneq (,$(wildcard ../extensions/formautofill/locales))
 	@$(MAKE) -C ../extensions/formautofill/locales chrome AB_CD=$*
 endif
-	@$(MAKE) -C ../extensions/pocket/locale chrome AB_CD=$*
 ifndef RELEASE_OR_BETA
 	@$(MAKE) -C ../extensions/presentation/locale chrome AB_CD=$*
 endif
 	@$(MAKE) -C ../../devtools/client/locales chrome AB_CD=$*
 	@$(MAKE) -C ../../devtools/shim/locales chrome AB_CD=$*
 	@$(MAKE) chrome AB_CD=$*
 	@$(MAKE) -C $(DEPTH)/$(MOZ_BRANDING_DIRECTORY)/locales chrome AB_CD=$*
-ifdef NIGHTLY_BUILD
-	@$(MAKE) -C ../extensions/webcompat-reporter/locales chrome AB_CD=$*
-endif
 
 package-win32-installer: WIN32_INSTALLER_OUT=$(ABS_DIST)/$(PKG_INST_PATH)$(PKG_INST_BASENAME).exe
 package-win32-installer: $(SUBMAKEFILES)
 	@echo 'Packaging $(WIN32_INSTALLER_OUT).'
 	$(MAKE) -C ../installer/windows CONFIG_DIR=l10ngen l10ngen/setup.exe l10ngen/7zSD.sfx
 	$(RM) -r $(STAGEDIST)/uninstall
 	$(NSINSTALL) -D $(STAGEDIST)/uninstall
 	cp ../installer/windows/l10ngen/helper.exe $(STAGEDIST)/uninstall
# HG changeset patch
# User RealDolos <dolos@cock.li>
# Date 1518019820 -3600
#      Wed Feb 07 17:10:20 2018 +0100
# Node ID 97c67f854a4fe6031ee85a3f4b86961aebf87323
# Parent  59e54b3a7bf0cf029a0f1dec4bd42db3ba047954
Fix menu toolbar button styles

diff --git a/browser/themes/shared/toolbarbuttons.inc.css b/browser/themes/shared/toolbarbuttons.inc.css
--- a/browser/themes/shared/toolbarbuttons.inc.css
+++ b/browser/themes/shared/toolbarbuttons.inc.css
@@ -110,23 +110,27 @@ toolbar .toolbarbutton-1 {
 
 toolbar .toolbarbutton-1 > menupopup {
   margin-top: -3px;
 }
 
 .findbar-button > .toolbarbutton-text,
 toolbarbutton.bookmark-item:not(.subviewbutton),
 toolbar .toolbarbutton-1 > .toolbarbutton-icon,
+toolbar .toolbarbutton-1[type="menu"] > toolbarbutton > .toolbarbutton-icon,
+toolbar .toolbarbutton-1[type="menu-button"] > toolbarbutton > .toolbarbutton-icon,
 toolbar .toolbarbutton-1 > .toolbarbutton-text,
 toolbar .toolbarbutton-1 > .toolbarbutton-badge-stack {
   padding: var(--toolbarbutton-inner-padding);
   border-radius: var(--toolbarbutton-border-radius);
 }
 
-toolbar .toolbarbutton-1 > .toolbarbutton-icon {
+toolbar .toolbarbutton-1 .toolbarbutton-icon,
+toolbar .toolbarbutton-1[type="menu"] > toolbarbutton > .toolbarbutton-icon,
+toolbar .toolbarbutton-1[type="menu-button"] > toolbarbutton > .toolbarbutton-icon {
   /* horizontal padding + actual icon width */
   width: calc(2 * var(--toolbarbutton-inner-padding) + 16px);
   height: calc(2 * var(--toolbarbutton-inner-padding) + 16px);
 }
 
 .bookmark-item > .toolbarbutton-menu-dropmarker,
 toolbar .toolbarbutton-1 > .toolbarbutton-menu-dropmarker {
   display: none;
@@ -170,27 +174,44 @@ toolbar[brighttext] .toolbaritem-combine
 }
 
 #PersonalToolbar .toolbarbutton-1:not([disabled=true]):not([checked]):not([open]):not(:active):hover,
 .tabbrowser-arrowscrollbox > .scrollbutton-up:not([disabled=true]):hover,
 .tabbrowser-arrowscrollbox > .scrollbutton-down:not([disabled=true]):hover,
 .findbar-button:not(:-moz-any([checked="true"],[disabled="true"])):hover > .toolbarbutton-text,
 toolbarbutton.bookmark-item:not(.subviewbutton):hover:not([disabled="true"]):not([open]),
 toolbar .toolbarbutton-1:not([disabled=true]):not([checked]):not([open]):not(:active):hover > .toolbarbutton-icon,
+toolbar .toolbarbutton-1:-moz-any([type="menu"],[type="menu-button"]):not([disabled=true]):not([checked]):not([open]):not(:active):hover .toolbarbutton-icon,
 toolbar .toolbarbutton-1:not([disabled=true]):not([checked]):not([open]):not(:active):hover > .toolbarbutton-text,
 toolbar .toolbarbutton-1:not([disabled=true]):not([checked]):not([open]):not(:active):hover > .toolbarbutton-badge-stack {
   background-color: var(--toolbarbutton-hover-background);
   color: inherit;
 }
 
+toolbar .toolbarbutton-1:-moz-any([type="menu"],[type="menu-button"]) toolbarbutton {
+  -moz-appearance: none !important;
+  margin: 0px;
+  padding-right: 0;
+}
+toolbar .toolbarbutton-1:-moz-any([type="menu"],[type="menu-button"]) .toolbarbutton-icon {
+  margin-right: 2px;
+}
+
+toolbar .toolbarbutton-1:-moz-any([type="menu"],[type="menu-button"]) .toolbarbutton-menubutton-dropmarker {
+  margin-left: 0;
+  padding-left: 0;
+}
+
 #PersonalToolbar .toolbarbutton-1:not([disabled=true]):-moz-any([open],[checked],:hover:active),
 .findbar-button:not([disabled=true]):-moz-any([checked="true"],:hover:active) > .toolbarbutton-text,
 toolbarbutton.bookmark-item:not(.subviewbutton):hover:active:not([disabled="true"]),
 toolbarbutton.bookmark-item[open="true"],
 toolbar .toolbarbutton-1:not([disabled=true]):-moz-any([open],[checked],:hover:active) > .toolbarbutton-icon,
+toolbar .toolbarbutton-1[type="menu"]:not([disabled=true]):-moz-any([open],[checked],:hover:active) .toolbarbutton-icon,
+toolbar .toolbarbutton-1[type="menu-button"]:not([disabled=true]):-moz-any([open],[checked],:hover:active) .toolbarbutton-icon,
 toolbar .toolbarbutton-1:not([disabled=true]):-moz-any([open],[checked],:hover:active) > .toolbarbutton-text,
 toolbar .toolbarbutton-1:not([disabled=true]):-moz-any([open],[checked],:hover:active) > .toolbarbutton-badge-stack {
   background-color: var(--toolbarbutton-active-background);
   color: inherit;
 }
 
 toolbar .toolbarbutton-1[checked]:not(:active):hover > .toolbarbutton-icon {
   background-color: var(--toolbarbutton-hover-background);
# HG changeset patch
# User RealDolos <dolos@cock.li>
# Date 1518541936 -3600
#      Tue Feb 13 18:12:16 2018 +0100
# Node ID 5d34c95486cdcd02f53ce706acef504245272c41
# Parent  97c67f854a4fe6031ee85a3f4b86961aebf87323
Be less anal about unsigned stuff

diff --git a/toolkit/mozapps/extensions/internal/XPIProvider.jsm b/toolkit/mozapps/extensions/internal/XPIProvider.jsm
--- a/toolkit/mozapps/extensions/internal/XPIProvider.jsm
+++ b/toolkit/mozapps/extensions/internal/XPIProvider.jsm
@@ -4914,17 +4914,17 @@ AddonInternal.prototype = {
         // installed there do not require signing.
         if (Services.appinfo.OS != "Darwin")
           return true;
         break;
     }
 
     if (this.signedState === AddonManager.SIGNEDSTATE_NOT_REQUIRED)
       return true;
-    return this.signedState > AddonManager.SIGNEDSTATE_MISSING;
+    return this.signedState >= AddonManager.SIGNEDSTATE_MISSING;
   },
 
   get isCompatible() {
     return this.isCompatibleWith();
   },
 
   get disabled() {
     return (this.userDisabled || this.appDisabled || this.softDisabled);
# HG changeset patch
# User RealDolos <dolos@cock.li>
# Date 1517676909 -3600
#      Sat Feb 03 17:55:09 2018 +0100
# Node ID ef42e428085a1fd9f0b37769ff02bd75162e8bc3
# Parent  5d34c95486cdcd02f53ce706acef504245272c41
Better setup icon

diff --git a/other-licenses/7zstub/firefox/7zSD.sfx b/other-licenses/7zstub/firefox/7zSD.sfx
index fd4e7acf42604a2503e2943072de293936b8dfe6..b1d986a3b1d7b2b6e5b51b2c7f9b18e8f6501a0a
GIT binary patch
literal 559104
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%0AL_{%drE5nPvNPIqi+UF*A
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

diff --git a/other-licenses/7zstub/src/7zip/Bundles/SFXSetup-moz/setup.ico b/other-licenses/7zstub/src/7zip/Bundles/SFXSetup-moz/setup.ico
index 794f23d5c06c37d64ac0d2f8909a7b17adcb8289..87d57a395863ec689bbb560487719a8813b5deb1
GIT binary patch
literal 408142
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

# HG changeset patch
# User RealDolos <dolos@cock.li>
# Date 1518656626 -3600
#      Thu Feb 15 02:03:46 2018 +0100
# Node ID bb8aa0e022fdbd42788dc0dfe67b22d09859b90f
# Parent  ef42e428085a1fd9f0b37769ff02bd75162e8bc3
Bug 1438209: tentative fix

diff --git a/ipc/glue/GeckoChildProcessHost.cpp b/ipc/glue/GeckoChildProcessHost.cpp
--- a/ipc/glue/GeckoChildProcessHost.cpp
+++ b/ipc/glue/GeckoChildProcessHost.cpp
@@ -1023,23 +1023,25 @@ GeckoChildProcessHost::PerformAsyncLaunc
   }
 
   // Process id
   cmdLine.AppendLooseValue(UTF8ToWide(pidstring));
 
   cmdLine.AppendLooseValue(
     UTF8ToWide(CrashReporter::GetChildNotificationPipe()));
 
-  PROsfd h = PR_FileDesc2NativeHandle(crashAnnotationWritePipe);
+  if (!CrashReporter::IsDummy()) {
+    PROsfd h = PR_FileDesc2NativeHandle(crashAnnotationWritePipe);
 # if defined(MOZ_SANDBOX)
-  mSandboxBroker.AddHandleToShare(reinterpret_cast<HANDLE>(h));
+    mSandboxBroker.AddHandleToShare(reinterpret_cast<HANDLE>(h));
 # endif // defined(MOZ_SANDBOX)
-  mLaunchOptions->handles_to_inherit.push_back(reinterpret_cast<HANDLE>(h));
-  std::string hStr = std::to_string(h);
-  cmdLine.AppendLooseValue(UTF8ToWide(hStr));
+    mLaunchOptions->handles_to_inherit.push_back(reinterpret_cast<HANDLE>(h));
+    std::string hStr = std::to_string(h);
+    cmdLine.AppendLooseValue(UTF8ToWide(hStr));
+  }
 
   // Process type
   cmdLine.AppendLooseValue(UTF8ToWide(childProcessType));
 
 # if defined(MOZ_SANDBOX)
   if (shouldSandboxCurrentProcess) {
     if (mSandboxBroker.LaunchApp(cmdLine.program().c_str(),
                                  cmdLine.command_line_string().c_str(),
